@using Campus360.Models

<div class="timeline-container">
    @if (Groups != null && Groups.Any())
    {
        <div class="timeline-wrapper">
            @foreach (var group in Groups)
            {
                <div class="timeline-group mb-4">
                    <div class="timeline-header">
                        <h5 class="mb-0">@group.GroupDate.ToString("MMMM dd, yyyy")</h5>
                        @if (group.Events.Count > 0)
                        {
                            <span class="text-muted">@group.Events.Count events</span>
                        }
                    </div>
                    
                    <div class="timeline">
                        @foreach (var evt in group.Events)
                        {
                            <div class="timeline-item">
                                <div class="timeline-marker" style="background-color: @evt.Color">
                                    <i class="@GetEventIcon(evt.EventType.ToString())"></i>
                                </div>
                                <div class="timeline-content">
                                    <div class="d-flex justify-content-between mb-1">
                                        <h6 class="mb-0 fw-bold">@evt.Title</h6>
                                        <span class="badge @GetEventBadgeClass(evt.EventType.ToString())">@evt.EventType</span>
                                    </div>
                                    
                                    <p class="mb-1 small">@evt.Description</p>
                                    
                                    <div class="timeline-details">
                                        <div class="timeline-meta">
                                            <small class="text-muted">
                                                <i class="bi bi-clock me-1"></i>@evt.TimeAgo
                                            </small>
                                            
                                            @if (!string.IsNullOrEmpty(evt.Venue))
                                            {
                                                <small class="text-muted ms-2">
                                                    <i class="bi bi-geo-alt me-1"></i>@evt.Venue
                                                </small>
                                            }
                                        </div>
                                        
                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => OnEventClick.InvokeAsync(evt)">
                                            Details
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-4">
            <div class="mb-3">
                <i class="bi bi-calendar-x display-5 text-muted"></i>
            </div>
            <p>No timeline events found.</p>
        </div>
    }
</div>

@code {
    [Parameter] public List<TimelineGroup> Groups { get; set; } = new();
    [Parameter] public List<TimelineEvent> Events { get; set; } = new();
    [Parameter] public EventCallback<TimelineEvent> OnEventClick { get; set; }

    private string GetEventIcon(string eventType)
    {
        return eventType.ToLower() switch
        {
            "assignment" => "bi bi-file-earmark-text",
            "exam" => "bi bi-pencil-square",
            "notice" => "bi bi-megaphone",
            "class" => "bi bi-easel",
            "holiday" => "bi bi-calendar-check",
            "reminder" => "bi bi-bell",
            "result" => "bi bi-trophy",
            _ => "bi bi-calendar-event"
        };
    }

    private string GetEventBadgeClass(string eventType)
    {
        return eventType.ToLower() switch
        {
            "assignment" => "bg-primary",
            "exam" => "bg-danger",
            "notice" => "bg-info",
            "class" => "bg-success",
            "holiday" => "bg-warning",
            "reminder" => "bg-secondary",
            "result" => "bg-info",
            _ => "bg-secondary"
        };
    }
}

<style>
.timeline-container {
    position: relative;
    width: 100%;
}

.timeline-wrapper {
    padding: 1rem 0;
}

.timeline-header {
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #eee;
}

.timeline {
    position: relative;
    padding-left: 2rem;
    margin-left: 1rem;
}

.timeline::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    width: 2px;
    background: #e9ecef;
}

.timeline-item {
    position: relative;
    padding-bottom: 1.5rem;
}

.timeline-marker {
    position: absolute;
    left: -2.7rem;
    width: 1.5rem;
    height: 1.5rem;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 0.7rem;
    box-shadow: 0 0 0 4px #fff;
}

.timeline-content {
    background: #fff;
    border-radius: 0.5rem;
    padding: 1rem;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.timeline-details {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 0.5rem;
}

.timeline-meta {
    display: flex;
}
</style>
