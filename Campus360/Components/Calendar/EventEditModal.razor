@using Campus360.Models
@using Campus360.Services
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject CalendarService CalendarService
@inject UserContextService UserContext
@inject ActivityLogService ActivityLogService
@inject IJSRuntime JSRuntime

<!-- Event Edit Modal -->
<div class="modal fade" id="@ModalId" tabindex="-1" aria-labelledby="@($"{ModalId}Label")" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="@($"{ModalId}Label")">
                    <i class="bi bi-pencil-square me-2"></i>Edit Event
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (currentEvent != null)
                {
                    <EditForm Model="@editModel" OnValidSubmit="@SaveEvent">
                        <DataAnnotationsValidator />
                        
                        <div class="row">
                            <div class="col-md-8">
                                <div class="mb-3">
                                    <label for="eventTitle" class="form-label">Event Title <span class="text-danger">*</span></label>
                                    <InputText id="eventTitle" class="form-control" @bind-Value="editModel.Title" />
                                    <ValidationMessage For="@(() => editModel.Title)" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="eventType" class="form-label">Event Type <span class="text-danger">*</span></label>
                                    <InputSelect id="eventType" class="form-select" @bind-Value="editModel.Type">
                                        @foreach (var type in GetAvailableEventTypes())
                                        {
                                            <option value="@type">@type.ToString()</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => editModel.Type)" />
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="eventDescription" class="form-label">Description</label>
                            <InputTextArea id="eventDescription" class="form-control" rows="3" @bind-Value="editModel.Description" />
                            <ValidationMessage For="@(() => editModel.Description)" />
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="startDate" class="form-label">Start Date <span class="text-danger">*</span></label>
                                    <InputDate id="startDate" class="form-control" @bind-Value="editModel.StartDate" />
                                    <ValidationMessage For="@(() => editModel.StartDate)" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="endDate" class="form-label">End Date</label>
                                    <InputDate id="endDate" class="form-control" @bind-Value="editModel.EndDate" />
                                    <ValidationMessage For="@(() => editModel.EndDate)" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <div class="form-check">
                                        <InputCheckbox id="hasTime" class="form-check-input" @bind-Value="editModel.HasTime" />
                                        <label class="form-check-label" for="hasTime">
                                            Specific Time
                                        </label>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="priority" class="form-label">Priority</label>                                    <InputSelect id="priority" class="form-select" @bind-Value="editModel.Priority">
                                        <option value="@EventPriority.Low">Low</option>
                                        <option value="@EventPriority.Normal">Normal</option>
                                        <option value="@EventPriority.High">High</option>
                                        <option value="@EventPriority.Critical">Critical</option>
                                    </InputSelect>
                                </div>
                            </div>
                        </div>

                        @if (editModel.HasTime)
                        {
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="startTime" class="form-label">Start Time</label>
                                        <InputDate Type="InputDateType.Time" id="startTime" class="form-control" @bind-Value="editModel.StartTime" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="endTime" class="form-label">End Time</label>
                                        <InputDate Type="InputDateType.Time" id="endTime" class="form-control" @bind-Value="editModel.EndTime" />
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="mb-3">
                            <label for="location" class="form-label">Location/Venue</label>
                            <InputText id="location" class="form-control" @bind-Value="editModel.Location" />
                        </div>

                        @if (IsTeacherOrAdmin())
                        {
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="courseId" class="form-label">Course (Optional)</label>
                                        <InputSelect id="courseId" class="form-select" @bind-Value="editModel.CourseId">
                                            <option value="">-- Select Course --</option>
                                            @foreach (var course in availableCourses)
                                            {
                                                <option value="@course.Id">@course.Name (@course.Code)</option>
                                            }
                                        </InputSelect>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="targetRole" class="form-label">Target Audience</label>
                                        <InputSelect id="targetRole" class="form-select" @bind-Value="editModel.TargetRole">
                                            <option value="@EventTargetRole.Student">Students</option>
                                            <option value="@EventTargetRole.Teacher">Teachers</option>
                                            <option value="@EventTargetRole.All">Everyone</option>
                                        </InputSelect>
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-danger me-2" @onclick="DeleteEvent" 
                                    @onclick:preventDefault="true" disabled="@(!CanDelete())">
                                <i class="bi bi-trash me-1"></i>Delete
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                }
                                <i class="bi bi-check-lg me-1"></i>Save Changes
                            </button>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string ModalId { get; set; } = "editEventModal";
    [Parameter] public EventCallback OnEventUpdated { get; set; }
    [Parameter] public EventCallback OnEventDeleted { get; set; }
    [Parameter] public string UserId { get; set; } = string.Empty;
    [Parameter] public string UserRole { get; set; } = string.Empty;

    private CalendarEvent? currentEvent;
    private EventEditModel editModel = new();
    private List<Course> availableCourses = new();
    private bool isSaving = false;

    public async Task ShowAsync(CalendarEvent eventToEdit)
    {
        currentEvent = eventToEdit;
        editModel = new EventEditModel
        {
            Title = eventToEdit.Title,
            Description = eventToEdit.Description ?? string.Empty,
            Type = eventToEdit.Type,
            StartDate = eventToEdit.StartDate.Date,
            EndDate = eventToEdit.EndDate?.Date,
            HasTime = eventToEdit.HasTime,
            StartTime = eventToEdit.HasTime ? eventToEdit.StartDate : null,
            EndTime = eventToEdit.HasTime && eventToEdit.EndDate.HasValue ? eventToEdit.EndDate.Value : null,
            Location = eventToEdit.Location ?? string.Empty,
            Priority = eventToEdit.Priority,
            CourseId = eventToEdit.CourseId ?? string.Empty,
            TargetRole = EventTargetRole.Student // Default or from event
        };        await LoadAvailableCourses();
        StateHasChanged();
        
        // Show modal using JavaScript
        await Task.Delay(100); // Small delay to ensure DOM is updated
        await JSRuntime.InvokeVoidAsync("showModal", ModalId);
    }    private async Task LoadAvailableCourses()
    {
        try
        {
            // Get courses from CalendarService
            availableCourses = await CalendarService.GetAvailableCoursesAsync(
                UserId,
                UserRole);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading courses: {ex.Message}");
            availableCourses = new List<Course>();
        }
    }

    private async Task SaveEvent()
    {
        if (currentEvent == null) return;

        try
        {
            isSaving = true;
            StateHasChanged();

            var updatedEvent = new CalendarEvent
            {
                Id = currentEvent.Id,
                Title = editModel.Title,
                Description = editModel.Description,
                Type = editModel.Type,
                StartDate = editModel.HasTime && editModel.StartTime.HasValue 
                    ? editModel.StartDate.Add(editModel.StartTime.Value.TimeOfDay)
                    : editModel.StartDate,
                EndDate = editModel.EndDate.HasValue
                    ? (editModel.HasTime && editModel.EndTime.HasValue 
                        ? editModel.EndDate.Value.Add(editModel.EndTime.Value.TimeOfDay)
                        : editModel.EndDate.Value)
                    : null,
                HasTime = editModel.HasTime,
                Location = editModel.Location,
                Priority = editModel.Priority,
                CourseId = string.IsNullOrEmpty(editModel.CourseId) ? null : editModel.CourseId
            };            // Convert CalendarEvent to CreateEventModel for update
            var updateModel = new CreateEventModel {
                Title = updatedEvent.Title,
                Description = updatedEvent.Description,
                EventType = ConvertEventType(updatedEvent.Type),
                StartDate = updatedEvent.StartDate,
                EndDate = updatedEvent.EndDate,
                IsAllDay = !updatedEvent.HasTime,
                StartTime = updatedEvent.HasTime ? updatedEvent.StartDate.TimeOfDay : null,
                EndTime = updatedEvent.HasTime && updatedEvent.EndDate.HasValue ? updatedEvent.EndDate.Value.TimeOfDay : null,
                Venue = updatedEvent.Location,
                Priority = updatedEvent.Priority,
                CourseId = updatedEvent.CourseId,
                Color = updatedEvent.Color
            };            var result = await CalendarService.UpdateEventAsync(
                currentEvent.Id,
                updateModel,
                UserId);
            
            var success = result.Success;            if (success)
            {
                // Log activity for audit
                await ActivityLogService.LogActivityAsync(
                    UserId,
                    "Updated Calendar Event",
                    $"Updated event '{updatedEvent.Title}' on {updatedEvent.StartDate:d}",
                    "event_updated");
                    
                await OnEventUpdated.InvokeAsync();
                // Close modal using JavaScript
                await JSRuntime.InvokeVoidAsync("hideModal", ModalId);
            }
            else
            {
                // Show error message
                await JSRuntime.InvokeVoidAsync("showToast", "error", result.Message ?? "Failed to update event");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving event: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task DeleteEvent()
    {
        if (currentEvent == null) return;

        try
        {
            var confirmed = true; // In real implementation, show confirmation dialog
            if (!confirmed) return;            var result = await CalendarService.DeleteEventAsync(
                currentEvent.Id,
                UserId);
                
            var success = result.Success;

            if (success)
            {
                await OnEventDeleted.InvokeAsync();
                // Close modal using JavaScript
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting event: {ex.Message}");
        }
    }    private bool CanDelete()
    {
        if (currentEvent == null) return false;
        
        // Admins can delete any event, others can only delete their own
        return UserRole == "Admin" || currentEvent.CreatedBy == UserId;
    }

    private bool IsTeacherOrAdmin()
    {
        return UserRole == "Teacher" || UserRole == "Admin";
    }

    private List<EventType> GetAvailableEventTypes()
    {
        if (UserRole == "Admin")
        {
            return Enum.GetValues<EventType>().ToList();
        }
        else if (UserRole == "Teacher")
        {
            return new List<EventType> 
            { 
                EventType.Assignment, 
                EventType.Exam, 
                EventType.Class, 
                EventType.Meeting,
                EventType.Event 
            };
        }
        else
        {
            return new List<EventType> { EventType.Event };
        }
    }

    private Campus360.Models.AcademicEventType ConvertEventType(Campus360.Models.EventType eventType)
    {
        return eventType switch
        {
            EventType.Assignment => AcademicEventType.Assignment,
            EventType.Exam => AcademicEventType.Exam,
            EventType.Class => AcademicEventType.ClassScheduled,
            EventType.Event => AcademicEventType.Other,
            EventType.Holiday => AcademicEventType.Holiday,
            EventType.Notice => AcademicEventType.Notice,
            EventType.Meeting => AcademicEventType.Meeting,
            EventType.Deadline => AcademicEventType.Assignment,
            _ => AcademicEventType.Other
        };
    }

    public class EventEditModel
    {
        [Required(ErrorMessage = "Event title is required")]
        [StringLength(200, ErrorMessage = "Title cannot exceed 200 characters")]
        public string Title { get; set; } = string.Empty;

        [StringLength(1000, ErrorMessage = "Description cannot exceed 1000 characters")]
        public string Description { get; set; } = string.Empty;

        [Required]
        public EventType Type { get; set; } = EventType.Event;

        [Required]
        public DateTime StartDate { get; set; } = DateTime.Today;

        public DateTime? EndDate { get; set; }

        public bool HasTime { get; set; } = false;

        public DateTime? StartTime { get; set; }

        public DateTime? EndTime { get; set; }

        [StringLength(200, ErrorMessage = "Location cannot exceed 200 characters")]
        public string Location { get; set; } = string.Empty;

        public EventPriority Priority { get; set; } = EventPriority.Normal;

        public string CourseId { get; set; } = string.Empty;

        public EventTargetRole TargetRole { get; set; } = EventTargetRole.Student;
    }
}
