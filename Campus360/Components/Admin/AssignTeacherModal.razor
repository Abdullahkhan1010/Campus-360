@using Campus360.Models
@inject IJSRuntime JSRuntime

<div class="modal fade" id="@ModalId" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                @if (Teachers.Any())
                {
                    <div class="mb-3">
                        <label class="form-label">Select Teacher</label>
                        <select @bind="SelectedTeacherId" class="form-select">
                            <option value="">-- Select Teacher --</option>
                            @foreach (var teacher in Teachers)
                            {
                                <option value="@teacher.Id">@teacher.FullName (@teacher.Email)</option>
                            }
                        </select>
                    </div>

                    <div class="d-flex justify-content-end gap-2">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="HandleAssign" disabled="@(string.IsNullOrEmpty(SelectedTeacherId) || IsSubmitting)">
                            @if (IsSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            Assign
                        </button>
                    </div>
                }
                else
                {
                    <div class="text-center">
                        <i class="bi bi-exclamation-triangle text-warning" style="font-size: 2rem;"></i>
                        <p class="mt-2">No teachers available. Please add teachers first.</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string ModalId { get; set; } = "assignTeacherModal";
    [Parameter] public string Title { get; set; } = "Assign Teacher";
    [Parameter] public List<UserManagementModel> Teachers { get; set; } = new();
    [Parameter] public EventCallback<string> OnAssignment { get; set; }

    private string SelectedTeacherId = "";
    private bool IsSubmitting = false;

    public async Task ShowAsync()
    {
        SelectedTeacherId = "";
        await JSRuntime.InvokeVoidAsync("showModal", ModalId);
    }

    private async Task HandleAssign()
    {
        if (!string.IsNullOrEmpty(SelectedTeacherId))
        {
            IsSubmitting = true;
            try
            {
                await OnAssignment.InvokeAsync(SelectedTeacherId);
                await JSRuntime.InvokeVoidAsync("hideModal", ModalId);
            }
            finally
            {
                IsSubmitting = false;
            }
        }
    }
}
