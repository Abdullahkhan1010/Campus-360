@using Campus360.Models
@inject IJSRuntime JSRuntime

<div class="modal fade" id="@ModalId" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(IsEditing ? "Edit Course" : "Add New Course")</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="CourseModel" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Course Name *</label>
                                <InputText @bind-Value="CourseModel.Name" class="form-control" placeholder="Enter course name" />
                                <ValidationMessage For="@(() => CourseModel.Name)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Course Code *</label>
                                <InputText @bind-Value="CourseModel.Code" class="form-control" placeholder="e.g., CS101, IT201" />
                                <ValidationMessage For="@(() => CourseModel.Code)" />
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Department *</label>
                                <InputSelect @bind-Value="CourseModel.DepartmentId" class="form-select">
                                    <option value="">-- Select Department --</option>
                                    @foreach (var dept in Departments)
                                    {
                                        <option value="@dept.Id">@dept.Name (@dept.Code)</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => CourseModel.DepartmentId)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Semester</label>
                                <InputNumber @bind-Value="CourseModel.Semester" class="form-control" min="1" max="8" />
                                <ValidationMessage For="@(() => CourseModel.Semester)" />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Credit Hours</label>
                                <InputNumber @bind-Value="CourseModel.CreditHours" class="form-control" min="1" max="6" />
                                <ValidationMessage For="@(() => CourseModel.CreditHours)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Status</label>
                                <InputSelect @bind-Value="CourseModel.IsActive" class="form-select">
                                    <option value="true">Active</option>
                                    <option value="false">Inactive</option>
                                </InputSelect>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <InputTextArea @bind-Value="CourseModel.Description" class="form-control" rows="3" placeholder="Enter course description (optional)" />
                        <ValidationMessage For="@(() => CourseModel.Description)" />
                    </div>

                    <div class="d-flex justify-content-end gap-2">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary" disabled="@IsSubmitting">
                            @if (IsSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            @(IsEditing ? "Update Course" : "Create Course")
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string ModalId { get; set; } = "courseModal";
    [Parameter] public List<Department> Departments { get; set; } = new();
    [Parameter] public EventCallback<Course> OnCourseSaved { get; set; }

    private Course CourseModel = new();
    private bool IsSubmitting = false;
    private bool IsEditing = false;

    public async Task ShowAsync(Course? existingCourse = null)
    {
        IsEditing = existingCourse != null;
        
        if (IsEditing && existingCourse != null)
        {
            CourseModel = new Course
            {
                Id = existingCourse.Id,
                Name = existingCourse.Name,
                Code = existingCourse.Code,
                Description = existingCourse.Description,
                DepartmentId = existingCourse.DepartmentId,
                Semester = existingCourse.Semester,
                CreditHours = existingCourse.CreditHours,
                IsActive = existingCourse.IsActive
            };
        }
        else
        {
            CourseModel = new Course();
        }

        await JSRuntime.InvokeVoidAsync("showModal", ModalId);
    }

    private async Task HandleSubmit()
    {
        IsSubmitting = true;
        try
        {
            await OnCourseSaved.InvokeAsync(CourseModel);
            await JSRuntime.InvokeVoidAsync("hideModal", ModalId);
        }
        finally
        {
            IsSubmitting = false;
        }
    }
}
