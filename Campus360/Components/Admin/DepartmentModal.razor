@using Campus360.Models
@inject AdminService AdminService
@inject IJSRuntime JSRuntime

<div class="modal fade" id="@ModalId" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(IsEditing ? "Edit Department" : "Add Department")</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="DepartmentModel" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Department Name *</label>
                                <InputText @bind-Value="DepartmentModel.Name" class="form-control" placeholder="Enter department name" />
                                <ValidationMessage For="@(() => DepartmentModel.Name)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Department Code *</label>
                                <InputText @bind-Value="DepartmentModel.Code" class="form-control" placeholder="e.g., CS, IT" />
                                <ValidationMessage For="@(() => DepartmentModel.Code)" />
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <InputTextArea @bind-Value="DepartmentModel.Description" class="form-control" rows="3" placeholder="Enter department description (optional)" />
                        <ValidationMessage For="@(() => DepartmentModel.Description)" />
                    </div>

                    <div class="d-flex justify-content-end gap-2">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary" disabled="@IsSubmitting">
                            @if (IsSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            @(IsEditing ? "Update Department" : "Create Department")
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string ModalId { get; set; } = "departmentModal";
    [Parameter] public EventCallback OnDepartmentSaved { get; set; }

    private Department DepartmentModel = new();
    private bool IsSubmitting = false;
    private bool IsEditing = false;

    public async Task ShowAsync(Department? existingDepartment = null)
    {
        IsEditing = existingDepartment != null;
        
        if (IsEditing && existingDepartment != null)
        {
            DepartmentModel = new Department
            {
                Id = existingDepartment.Id,
                Name = existingDepartment.Name,
                Code = existingDepartment.Code,
                Description = existingDepartment.Description,
                IsActive = existingDepartment.IsActive
            };
        }
        else
        {
            DepartmentModel = new Department();
        }

        await JSRuntime.InvokeVoidAsync("showModal", ModalId);
    }

    private async Task HandleSubmit()
    {
        IsSubmitting = true;
        try
        {
            bool success;
            if (IsEditing)
            {
                success = await AdminService.UpdateDepartmentAsync(DepartmentModel);
            }
            else
            {
                success = await AdminService.CreateDepartmentAsync(DepartmentModel);
            }

            if (success)
            {
                await JSRuntime.InvokeVoidAsync("hideModal", ModalId);
                await OnDepartmentSaved.InvokeAsync();
            }
        }
        finally
        {
            IsSubmitting = false;
        }
    }
}
