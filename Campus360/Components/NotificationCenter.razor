@using Campus360.Models
@using Campus360.Services
@inject AutomationEngineService AutomationEngine
@inject StudentServiceEnhanced StudentServiceEnhanced
@inject IJSRuntime JSRuntime

<div class="notification-center">
    <!-- Notification Bell Icon -->
    <div class="dropdown notification-dropdown">
        <button class="btn btn-link position-relative notification-bell" type="button" 
                data-bs-toggle="dropdown" aria-expanded="false" @onclick="LoadNotifications">
            <i class="fas fa-bell fs-5 text-muted"></i>
            @if (unreadCount > 0)
            {
                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                    @(unreadCount > 99 ? "99+" : unreadCount.ToString())
                    <span class="visually-hidden">unread notifications</span>
                </span>
            }
        </button>

        <!-- Notification Dropdown -->
        <div class="dropdown-menu dropdown-menu-end notification-dropdown-menu shadow-lg" style="width: 380px; max-height: 500px;">
            <!-- Header -->
            <div class="dropdown-header d-flex justify-content-between align-items-center py-3 px-3 border-bottom">
                <h6 class="mb-0 fw-bold">
                    <i class="fas fa-bell me-2"></i>Notifications
                </h6>
                @if (unreadCount > 0)
                {
                    <button class="btn btn-sm btn-outline-primary" @onclick="MarkAllAsRead">
                        <i class="fas fa-check-double me-1"></i>Mark All Read
                    </button>
                }
            </div>

            <!-- Loading State -->
            @if (isLoading)
            {
                <div class="text-center py-4">
                    <div class="spinner-border spinner-border-sm text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <div class="mt-2 text-muted small">Loading notifications...</div>
                </div>
            }
            else if (notifications == null || !notifications.Any())
            {
                <!-- Empty State -->
                <div class="text-center py-5">
                    <i class="fas fa-bell-slash text-muted" style="font-size: 2rem;"></i>
                    <p class="text-muted mt-2 mb-0">No notifications yet</p>
                    <small class="text-muted">You'll see updates here when they arrive</small>
                </div>
            }
            else
            {
                <!-- Notification List -->
                <div class="notification-list" style="max-height: 400px; overflow-y: auto;">
                    @foreach (var notification in notifications.Take(10))
                    {
                        <div class="dropdown-item notification-item @(!notification.IsRead ? "unread" : "") p-3 border-bottom" 
                             @onclick="() => HandleNotificationClick(notification)" 
                             style="cursor: pointer; white-space: normal;">
                            
                            <div class="d-flex align-items-start">
                                <!-- Icon -->
                                <div class="notification-icon me-3 flex-shrink-0">
                                    <div class="rounded-circle p-2 @GetIconBackgroundClass(notification.Type)" style="width: 40px; height: 40px;">
                                        <i class="@notification.DisplayIcon text-white small"></i>
                                    </div>
                                </div>

                                <!-- Content -->
                                <div class="notification-content flex-grow-1 min-width-0">
                                    <div class="d-flex justify-content-between align-items-start mb-1">
                                        <h6 class="notification-title mb-0 fw-semibold text-truncate">
                                            @notification.Title
                                        </h6>
                                        @if (!notification.IsRead)
                                        {
                                            <div class="notification-unread-dot bg-primary rounded-circle ms-2 flex-shrink-0" 
                                                 style="width: 8px; height: 8px;"></div>
                                        }
                                    </div>
                                    
                                    <p class="notification-message mb-2 text-muted small" style="line-height: 1.3;">
                                        @notification.Message
                                    </p>
                                    
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="notification-meta d-flex align-items-center">
                                            @if (!string.IsNullOrEmpty(notification.CourseName))
                                            {
                                                <span class="badge bg-light text-dark me-2 small">
                                                    @notification.CourseCode
                                                </span>
                                            }
                                            <span class="badge @notification.DisplayBadge small">
                                                @notification.Priority
                                            </span>
                                        </div>
                                        <small class="text-muted notification-time">
                                            @notification.TimeAgo
                                        </small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Footer -->
                @if (notifications.Count > 10)
                {
                    <div class="dropdown-footer text-center py-2 border-top">
                        <button class="btn btn-sm btn-link text-primary" @onclick="ViewAllNotifications">
                            <i class="fas fa-external-link-alt me-1"></i>View All (@notifications.Count)
                        </button>
                    </div>
                }
            }
        </div>
    </div>
</div>

<!-- Custom Styles -->
<style>
    .notification-center .notification-bell {
        border: none !important;
        box-shadow: none !important;
        padding: 8px;
        border-radius: 50%;
        transition: all 0.3s ease;
    }

    .notification-center .notification-bell:hover {
        background-color: rgba(0, 123, 255, 0.1) !important;
        transform: scale(1.05);
    }

    .notification-dropdown-menu {
        border: none;
        border-radius: 12px;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15) !important;
        margin-top: 8px;
    }

    .notification-item {
        transition: all 0.2s ease;
        border-left: 3px solid transparent;
    }

    .notification-item:hover {
        background-color: rgba(0, 123, 255, 0.05) !important;
        border-left-color: #007bff;
    }

    .notification-item.unread {
        background-color: rgba(0, 123, 255, 0.03);
        border-left-color: #007bff;
    }

    .notification-item.unread:hover {
        background-color: rgba(0, 123, 255, 0.08) !important;
    }

    .notification-icon {
        position: relative;
    }

    .notification-title {
        font-size: 0.9rem;
        line-height: 1.2;
    }

    .notification-message {
        font-size: 0.8rem;
        max-height: 2.6rem;
        overflow: hidden;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }

    .notification-time {
        font-size: 0.75rem;
        white-space: nowrap;
    }

    .notification-list::-webkit-scrollbar {
        width: 6px;
    }

    .notification-list::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 3px;
    }

    .notification-list::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 3px;
    }

    .notification-list::-webkit-scrollbar-thumb:hover {
        background: #a1a1a1;
    }
</style>

@code {
    [Parameter] public string UserId { get; set; } = string.Empty;
    [Parameter] public EventCallback<NotificationModel> OnNotificationClick { get; set; }

    private List<NotificationModel> notifications = new();
    private int unreadCount = 0;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(UserId))
        {
            await LoadNotifications();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(UserId))
        {
            await RefreshUnreadCount();
        }
    }    private async Task LoadNotifications()
    {
        if (string.IsNullOrEmpty(UserId) || isLoading) return;

        try
        {
            isLoading = true;
            StateHasChanged();

            // Use enhanced service for better real-time notification experience
            notifications = await StudentServiceEnhanced.GetRealTimeNotificationsAsync(UserId);
            unreadCount = await StudentServiceEnhanced.GetUnreadNotificationCountAsync(UserId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading notifications: {ex.Message}");
            // Fallback to automation engine
            try
            {
                notifications = await AutomationEngine.GetUserNotificationsAsync(UserId);
                unreadCount = await AutomationEngine.GetUnreadNotificationCountAsync(UserId);
            }
            catch
            {
                notifications = new List<NotificationModel>();
                unreadCount = 0;
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshUnreadCount()
    {
        if (string.IsNullOrEmpty(UserId)) return;

        try
        {
            unreadCount = await AutomationEngine.GetUnreadNotificationCountAsync(UserId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing unread count: {ex.Message}");
        }
    }

    private async Task HandleNotificationClick(NotificationModel notification)
    {
        try
        {
            // Mark as read if unread
            if (!notification.IsRead)
            {
                await AutomationEngine.MarkNotificationAsReadAsync(notification.Id);
                notification.IsRead = true;
                notification.ReadAt = DateTime.Now;
                unreadCount = Math.Max(0, unreadCount - 1);
                StateHasChanged();
            }

            // Trigger callback
            if (OnNotificationClick.HasDelegate)
            {
                await OnNotificationClick.InvokeAsync(notification);
            }

            // Navigate to action URL if provided
            if (!string.IsNullOrEmpty(notification.ActionUrl))
            {
                await JSRuntime.InvokeVoidAsync("window.location.href", notification.ActionUrl);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling notification click: {ex.Message}");
        }
    }

    private async Task MarkAllAsRead()
    {
        if (string.IsNullOrEmpty(UserId)) return;

        try
        {
            await AutomationEngine.MarkAllNotificationsAsReadAsync(UserId);
            
            // Update local state
            foreach (var notification in notifications.Where(n => !n.IsRead))
            {
                notification.IsRead = true;
                notification.ReadAt = DateTime.Now;
            }
            
            unreadCount = 0;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error marking all as read: {ex.Message}");
        }
    }

    private async Task ViewAllNotifications()
    {
        await JSRuntime.InvokeVoidAsync("window.location.href", "/notifications");
    }

    private string GetIconBackgroundClass(NotificationType type)
    {
        return type switch
        {
            NotificationType.Result => "bg-success",
            NotificationType.Assignment => "bg-primary",
            NotificationType.Attendance => "bg-info",
            NotificationType.Deadline => "bg-warning",
            NotificationType.Warning => "bg-warning",
            NotificationType.Alert => "bg-danger",
            NotificationType.Notice => "bg-secondary",
            NotificationType.Success => "bg-success",
            NotificationType.Error => "bg-danger",
            _ => "bg-primary"
        };
    }

    // Public method to refresh from parent components
    public async Task RefreshNotifications()
    {
        await LoadNotifications();
    }

    // Public method to add new notification (for real-time updates)
    public async Task AddNotification(NotificationModel notification)
    {
        if (notification.UserId == UserId)
        {
            notifications.Insert(0, notification);
            if (!notification.IsRead)
            {
                unreadCount++;
            }
            StateHasChanged();
        }
    }
}
