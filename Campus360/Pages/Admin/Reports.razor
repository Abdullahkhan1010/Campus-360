@page "/admin/reports"
@layout ModernAdminLayout_Fixed
@using Campus360.Models
@using Campus360.Services
@inject ReportingService ReportingService
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "admin")]

<PageTitle>Reports & Analytics - Campus360</PageTitle>

<div class="modern-page-container animate-fade-in">
    <!-- Page Header -->
    <div class="modern-page-header">
        <div class="modern-page-title">
            <div class="modern-page-icon">
                <i class="bi bi-file-earmark-bar-graph-fill"></i>
            </div>
            <div>
                <h1>Reports & Analytics</h1>
                <p>Generate, view, and manage system reports.</p>
            </div>
        </div>
        <div class="modern-page-actions">
            <button class="modern-btn modern-btn-secondary" @onclick="RefreshReports">
                <i class="bi bi-arrow-clockwise"></i> Refresh
            </button>
            <button class="modern-btn modern-btn-primary" @onclick="NavigateToCreateReport">
                <i class="bi bi-plus-circle-fill"></i> Create Report
            </button>
        </div>
    </div>

    <!-- Dashboard Overview - Styled with modern cards -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="modern-card animate-slide-up">
                <div class="card-header">
                    System Dashboard Overview
                </div>
                <div class="card-body">
                    @if (dashboardData != null)
                    {
                        <div class="stats-grid stats-grid-condensed">
                            @foreach (var metric in dashboardData.GlobalMetrics)
                            {
                                <div class="stat-card stat-card-sm">
                                    <div class="stat-icon">
                                        <i class="@GetMetricIcon(metric.Key)"></i>
                                    </div>
                                    <div class="stat-value">@FormatMetricValue(metric.Value)</div>
                                    <div class="stat-label">@FormatMetricName(metric.Key)</div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="loading-placeholder">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading dashboard...</span>
                            </div>
                            <p>Loading overview...</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Reports Section - Styled with modern cards and table -->
    <div class="modern-card animate-slide-up" style="animation-delay: 0.2s;">
        <div class="card-header">
            Available Reports
            <div class="card-header-actions">
                 <button class="modern-btn modern-btn-icon-only modern-btn-sm" @onclick="ToggleFilters" title="Toggle Filters">
                    <i class="bi bi-filter"></i>
                </button>
            </div>
        </div>
        <div class="card-body">
            @if (showFilters)
            {
                <div class="filters-container modern-form mb-4">
                    <div class="row g-3">
                        <div class="col-md-4">
                            <label for="categoryFilter" class="form-label">Category</label>
                            <select class="form-select modern-form-control" id="categoryFilter" @bind="selectedCategory" @bind:after="FilterReports">
                                <option value="">All Categories</option>
                                @foreach (var category in reportCategories)
                                {
                                    <option value="@category">@category</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="typeFilter" class="form-label">Type</label>
                            <select class="form-select modern-form-control" id="typeFilter" @bind="selectedType" @bind:after="FilterReports">
                                <option value="">All Types</option>
                                <option value="Dashboard">Dashboard</option>
                                <option value="Export">Export</option>
                                <option value="Scheduled">Scheduled</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="searchReports" class="form-label">Search</label>
                            <input type="text" class="form-control modern-form-control" id="searchReports" @bind="searchTerm" @oninput="FilterReports" placeholder="Search by name..." />
                        </div>
                    </div>
                </div>
            }

            @if (isLoadingReports)
            {
                <div class="loading-placeholder">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading reports...</span>
                    </div>
                    <p>Loading reports...</p>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="modern-table modern-table-hover">
                        <thead>
                            <tr>
                                <th>Report Name</th>
                                <th>Category</th>
                                <th>Type</th>
                                <th>Access</th>
                                <th>Status</th>
                                <th class="text-end">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (filteredReports != null && filteredReports.Any())
                            {
                                @foreach (var report in filteredReports)
                                {
                                    <tr>
                                        <td>
                                            <div class="d-flex flex-column">
                                                <span class="fw-semibold">@report.Name</span>
                                                @if (!string.IsNullOrEmpty(report.Description))
                                                {
                                                    <small class="text-muted">@report.Description</small>
                                                }
                                            </div>
                                        </td>
                                        <td><span class="modern-badge modern-badge-info">@report.Category</span></td>
                                        <td><span class="modern-badge modern-badge-secondary">@report.ReportType</span></td>
                                        <td>
                                            @foreach (var role in report.AccessRoles)
                                            {
                                                <span class="modern-badge modern-badge-primary me-1">@role</span>
                                            }
                                        </td>
                                        <td>
                                            <span class="modern-badge @(report.IsActive ? "modern-badge-success" : "modern-badge-secondary")">
                                                @(report.IsActive ? "Active" : "Inactive")
                                            </span>
                                        </td>
                                        <td class="text-end">
                                            <button class="modern-btn modern-btn-icon-only modern-btn-sm modern-btn-success-ghost me-1" @onclick="() => GenerateReport(report)" title="Generate Report" disabled="@(isGenerating && generatingReportId == report.Id)">
                                                @if (isGenerating && generatingReportId == report.Id)
                                                {
                                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                                }
                                                else
                                                {
                                                    <i class="bi bi-play-fill"></i>
                                                }
                                            </button>
                                            <button class="modern-btn modern-btn-icon-only modern-btn-sm modern-btn-info-ghost me-1" @onclick="() => ViewReportDetails(report)" title="View Details">
                                                <i class="bi bi-eye-fill"></i>
                                            </button>
                                            <button class="modern-btn modern-btn-icon-only modern-btn-sm modern-btn-warning-ghost" @onclick="() => ScheduleReport(report)" title="Schedule">
                                                <i class="bi bi-clock-fill"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="6">
                                        <div class="empty-state text-center py-5">
                                            <i class="bi bi-table" style="font-size: 3rem; color: var(--theme-text-secondary);"></i>
                                            <p class="mt-3">No reports found matching your criteria.</p>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<!-- Add a modal or separate page for "Create Report" if needed -->
<!-- Add a modal for "View Report Details" -->
<!-- Add a modal for "Schedule Report" -->

@code {
    private DashboardData? dashboardData;
    private List<SystemReport> allReports = new List<SystemReport>();
    private List<SystemReport> filteredReports = new List<SystemReport>();
    private List<string> reportCategories = new List<string>();
    private string selectedCategory = "";
    private string selectedType = "";
    private string searchTerm = "";
    private bool isLoadingReports = true;
    private bool isGenerating = false;
    private string? generatingReportId;
    private bool showFilters = true; // Default to show filters

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
        await LoadReports();
    }

    private async Task LoadDashboardData()
    {
        // Simulate API call
        // await Task.Delay(500); // Simulate network latency - keep for testing if needed
        // dashboardData = ReportingService.GetDashboardOverview(); // Old method
        dashboardData = await ReportingService.GetDashboardDataAsync(); // Corrected method
        StateHasChanged(); // Ensure UI updates if data loads quickly
    }

    private async Task LoadReports()
    {
        isLoadingReports = true;
        StateHasChanged(); // Update UI to show loading state

        // Simulate API call
        // await Task.Delay(1000); // Simulate network latency - keep for testing if needed
        // allReports = await ReportingService.GetAllReportDefinitionsAsync(); // Old method
        allReports = await ReportingService.GetSystemReportsAsync(); // Corrected method
        if (allReports != null)
        {
            reportCategories = allReports.Select(r => r.Category.ToString()).Distinct().OrderBy(c => c).ToList();
        }
        else
        {
            allReports = new List<SystemReport>(); // Initialize to empty list if null
            reportCategories = new List<string>();
        }
        FilterReports(); // Apply initial filter (which will be none)
        isLoadingReports = false;
        StateHasChanged(); // Update UI with loaded data
    }

    private void FilterReports()
    {
        if (allReports == null) 
        {
            filteredReports = new List<SystemReport>();
            StateHasChanged();
            return;
        }

        IEnumerable<SystemReport> currentFilter = allReports;

        if (!string.IsNullOrEmpty(selectedCategory))
        {
            currentFilter = currentFilter.Where(r => r.Category.ToString() == selectedCategory);
        }

        if (!string.IsNullOrEmpty(selectedType))
        {
            currentFilter = currentFilter.Where(r => r.ReportType.ToString() == selectedType);
        }

        if (!string.IsNullOrEmpty(searchTerm))
        {
            currentFilter = currentFilter.Where(r => r.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                                     (r.Description != null && r.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)));
        }

        filteredReports = currentFilter.OrderBy(r => r.Name).ToList();
        StateHasChanged();
    }

    private async Task RefreshReports()
    {
        selectedCategory = "";
        selectedType = "";
        searchTerm = "";
        await LoadReports();
    }

    private string FormatMetricName(string key)
    {
        // Simple formatter, can be expanded
        return System.Text.RegularExpressions.Regex.Replace(key, "([A-Z])", " $1").Trim();
    }

    private string FormatMetricValue(object value)
    {
        if (value is int || value is long || value is double || value is decimal)
        {
            return string.Format("{0:N0}", value); // Format numbers with commas
        }
        return value?.ToString() ?? "N/A";
    }

    private string GetMetricIcon(string key)
    {
        // Simple icon mapper, can be expanded
        return key switch
        {
            "TotalReports" => "bi bi-file-earmark-text",
            "ActiveReports" => "bi bi-file-earmark-check",
            "InactiveReports" => "bi bi-file-earmark-x",
            "ScheduledReports" => "bi bi-calendar-event",
            "ReportErrors" => "bi bi-exclamation-circle",
            _ => "bi bi-file-earmark-bar-graph",
        };
    }

    private async Task GenerateReport(SystemReport report)
    {
        if (report == null) return;

        isGenerating = true;
        generatingReportId = report.Id;
        StateHasChanged();

        try
        {
            // Simulate report generation
            await Task.Delay(2000);

            // Optionally, navigate to report view or show success message
            await JSRuntime.InvokeVoidAsync("alert", $"Report '{report.Name}' generated successfully!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error generating report: {ex.Message}");
        }
        finally
        {
            isGenerating = false;
            generatingReportId = null;
            StateHasChanged();
        }
    }

    private void ViewReportDetails(SystemReport report)
    {
        // Implement view details logic, e.g., open a modal or navigate to a details page
        JSRuntime.InvokeVoidAsync("alert", $"Viewing details for report: {report.Name}");
    }

    private void ScheduleReport(SystemReport report)
    {
        // Implement schedule logic, e.g., open a scheduling modal
        JSRuntime.InvokeVoidAsync("alert", $"Scheduling report: {report.Name}");
    }

    private void NavigateToCreateReport()
    {
        // Implement navigation to create report page or open a modal
        JSRuntime.InvokeVoidAsync("alert", "Navigating to create report page...");
    }

    private void ToggleFilters()
    {
        showFilters = !showFilters;
        StateHasChanged();
    }
}
