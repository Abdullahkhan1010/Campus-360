@page "/admin/automation"
@layout ModernAdminLayout_Fixed
@using Campus360.Models
@using Campus360.Services
@inject AutomationEngineService AutomationEngine
@inject IJSRuntime JSRuntime

<div class="container-fluid px-4">
    <!-- Header -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <div>
            <h1 class="h3 mb-0 text-gray-800">
                <i class="fas fa-robot text-primary me-2"></i>Automation Engine
            </h1>
            <p class="text-muted mb-0">Monitor and manage automated notifications and rules</p>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-outline-primary" @onclick="RefreshData">
                <i class="fas fa-sync-alt me-1"></i>Refresh
            </button>
            <button class="btn btn-primary" @onclick="ShowCreateRuleModal">
                <i class="fas fa-plus me-1"></i>New Rule
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="text-muted mt-3">Loading automation data...</p>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>
            @errorMessage
            <button class="btn btn-sm btn-outline-danger ms-2" @onclick="RefreshData">
                Try Again
            </button>
        </div>    }
    else
    {
        <!-- Real-Time Automation Status -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card shadow">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h6 class="m-0 font-weight-bold text-primary">
                            <i class="fas fa-heartbeat me-2"></i>Background Service Status
                        </h6>
                        <span class="badge @(backgroundServiceStatus == "Running" ? "bg-success" : "bg-danger")">
                            @backgroundServiceStatus
                        </span>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3">
                                <div class="text-center">
                                    <div class="text-muted small">Last Check</div>
                                    <div class="fw-bold">@lastAutomationCheck.ToString("HH:mm:ss")</div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-center">
                                    <div class="text-muted small">Next Check In</div>
                                    <div class="fw-bold" id="nextCheckCountdown">@GetNextCheckCountdown()</div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-center">
                                    <div class="text-muted small">Processed Today</div>
                                    <div class="fw-bold">@processedToday</div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-center">
                                    <div class="text-muted small">Queue Status</div>
                                    <div class="fw-bold text-@(queueCount > 0 ? "warning" : "success")">
                                        @queueCount queued
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Recent Processing Activities -->
                        <div class="mt-3">
                            <h6 class="text-muted mb-2">Recent Processing Activities</h6>
                            <div class="list-group list-group-flush" style="max-height: 200px; overflow-y: auto;">
                                @foreach (var activity in recentProcessingActivities.Take(5))
                                {
                                    <div class="list-group-item d-flex justify-content-between align-items-center py-2">
                                        <div>
                                            <small class="text-muted">@activity.Timestamp.ToString("HH:mm:ss")</small>
                                            <span class="ms-2">@activity.Description</span>
                                        </div>
                                        <span class="badge @GetStatusBadgeClass(activity.Status)">@activity.Status</span>
                                    </div>
                                }
                                @if (!recentProcessingActivities.Any())
                                {
                                    <div class="text-center text-muted py-3">
                                        <i class="fas fa-clock me-2"></i>No recent activity
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Metrics Overview -->
        <div class="row mb-4">
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card border-left-primary shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                    Total Notifications Sent
                                </div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800">
                                    @metrics?.TotalNotificationsSent.ToString("N0")
                                </div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-bell fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card border-left-success shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                    Active Rules
                                </div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800">
                                    @metrics?.TotalActiveRules
                                </div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-cogs fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card border-left-info shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                    Success Rate
                                </div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800">
                                    @metrics?.SuccessRate.ToString("F1")%
                                </div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-check-circle fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card border-left-warning shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                    Today's Notifications
                                </div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800">
                                    @metrics?.NotificationsSentToday
                                </div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-calendar-day fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="row">
            <!-- Automation Rules -->
            <div class="col-lg-8 mb-4">
                <div class="card shadow mb-4">
                    <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                        <h6 class="m-0 font-weight-bold text-primary">
                            <i class="fas fa-list-ul me-2"></i>Automation Rules
                        </h6>
                        <span class="badge bg-primary">@automationRules?.Count rules</span>
                    </div>
                    <div class="card-body">
                        @if (automationRules != null && automationRules.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Rule Name</th>
                                            <th>Trigger</th>
                                            <th>Priority</th>
                                            <th>Status</th>
                                            <th>Triggered</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var rule in automationRules)
                                        {
                                            <tr>
                                                <td>
                                                    <div class="fw-semibold">@rule.Name</div>
                                                    <small class="text-muted">@rule.Description</small>
                                                </td>
                                                <td>
                                                    <span class="badge bg-secondary">
                                                        @rule.Trigger.ToString().Replace("_", " ")
                                                    </span>
                                                </td>
                                                <td>
                                                    <span class="badge @GetPriorityBadgeClass(rule.Priority)">
                                                        @rule.Priority
                                                    </span>
                                                </td>
                                                <td>
                                                    <div class="form-check form-switch">
                                                        <input class="form-check-input" type="checkbox" 
                                                               checked="@rule.IsActive" 
                                                               @onchange="() => ToggleRule(rule.Id)">
                                                        <label class="form-check-label">
                                                            @(rule.IsActive ? "Active" : "Inactive")
                                                        </label>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="fw-bold">@rule.TriggerCount times</div>
                                                    @if (rule.LastTriggered.HasValue)
                                                    {
                                                        <small class="text-muted">
                                                            Last: @rule.LastTriggered.Value.ToString("MMM dd, HH:mm")
                                                        </small>
                                                    }
                                                </td>
                                                <td>
                                                    <div class="btn-group btn-group-sm">
                                                        <button class="btn btn-outline-primary" @onclick="() => EditRule(rule.Id)">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                        <button class="btn btn-outline-info" @onclick="() => ViewRuleLogs(rule.Id)">
                                                            <i class="fas fa-history"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="fas fa-robot text-muted" style="font-size: 3rem;"></i>
                                <h5 class="text-muted mt-3">No automation rules found</h5>
                                <p class="text-muted">Create your first automation rule to get started</p>
                                <button class="btn btn-primary" @onclick="ShowCreateRuleModal">
                                    <i class="fas fa-plus me-1"></i>Create Rule
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Recent Activity & Stats -->
            <div class="col-lg-4 mb-4">
                <!-- Quick Stats -->
                <div class="card shadow mb-4">
                    <div class="card-header py-3">
                        <h6 class="m-0 font-weight-bold text-primary">
                            <i class="fas fa-chart-pie me-2"></i>Notification Breakdown
                        </h6>
                    </div>
                    <div class="card-body">
                        @if (metrics?.NotificationsByType != null && metrics.NotificationsByType.Any())
                        {
                            @foreach (var item in metrics.NotificationsByType.Take(5))
                            {
                                var percentage = metrics.TotalNotificationsSent > 0 ? 
                                    (double)item.Value / metrics.TotalNotificationsSent * 100 : 0;
                                
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between align-items-center mb-1">
                                        <small class="fw-semibold">@item.Key</small>
                                        <small class="text-muted">@item.Value (@percentage.ToString("F1")%)</small>
                                    </div>
                                    <div class="progress" style="height: 6px;">
                                        <div class="progress-bar @GetTypeProgressBarClass(item.Key)" 
                                             style="width: @percentage.ToString("F1")%"></div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-muted text-center">No data available</p>
                        }
                    </div>
                </div>

                <!-- Top Triggered Rules -->
                <div class="card shadow mb-4">
                    <div class="card-header py-3">
                        <h6 class="m-0 font-weight-bold text-primary">
                            <i class="fas fa-trophy me-2"></i>Most Active Rules
                        </h6>
                    </div>
                    <div class="card-body">
                        @if (metrics?.TopRules != null && metrics.TopRules.Any())
                        {
                            @foreach (var rule in metrics.TopRules.Take(5))
                            {
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <div>
                                        <div class="fw-semibold small">@rule.RuleName</div>
                                        <small class="text-muted">@rule.TriggerType</small>
                                    </div>
                                    <div class="text-end">
                                        <div class="fw-bold text-primary">@rule.TriggerCount</div>
                                        <small class="text-muted">triggers</small>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-muted text-center">No rules triggered yet</p>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Automation Logs -->
        <div class="card shadow mb-4">
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-history me-2"></i>Recent Automation Activity
                </h6>
                <button class="btn btn-sm btn-outline-primary" @onclick="ViewAllLogs">
                    <i class="fas fa-external-link-alt me-1"></i>View All
                </button>
            </div>
            <div class="card-body">
                @if (automationLogs != null && automationLogs.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>Time</th>
                                    <th>Rule</th>
                                    <th>Target</th>
                                    <th>Message</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var log in automationLogs.Take(10))
                                {
                                    <tr>
                                        <td>
                                            <div class="small fw-semibold">@log.CreatedAt.ToString("MMM dd")</div>
                                            <div class="text-muted small">@log.CreatedAt.ToString("HH:mm")</div>
                                        </td>
                                        <td>
                                            <div class="fw-semibold small">@log.RuleName</div>
                                            <div class="text-muted small">@log.TriggerType.ToString().Replace("_", " ")</div>
                                        </td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(log.StudentName))
                                            {
                                                <div class="small">@log.StudentName</div>
                                                @if (!string.IsNullOrEmpty(log.CourseCode))
                                                {
                                                    <span class="badge bg-light text-dark small">@log.CourseCode</span>
                                                }
                                            }
                                            else if (!string.IsNullOrEmpty(log.TeacherName))
                                            {
                                                <div class="small">@log.TeacherName</div>
                                            }
                                            else
                                            {
                                                <span class="text-muted small">System</span>
                                            }
                                        </td>
                                        <td>
                                            <div class="small" style="max-width: 300px;">
                                                @(log.Message.Length > 80 ? log.Message.Substring(0, 80) + "..." : log.Message)
                                            </div>
                                        </td>
                                        <td>
                                            <span class="badge @log.StatusBadgeClass">
                                                <i class="@log.StatusIcon me-1"></i>@log.Status
                                            </span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-4">
                        <i class="fas fa-history text-muted" style="font-size: 2rem;"></i>
                        <h5 class="text-muted mt-3">No automation activity yet</h5>
                        <p class="text-muted">Activity will appear here when automation rules are triggered</p>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private AutomationMetrics? metrics;
    private List<AutomationRule>? automationRules;
    private List<AutomationLog>? automationLogs;
    private bool isLoading = true;
    private string? errorMessage;
    
    // Background service status properties
    private string backgroundServiceStatus = "Running";
    private DateTime lastAutomationCheck = DateTime.Now.AddMinutes(-2);
    private int processedToday = 47;
    private int queueCount = 0;
    private List<ProcessingActivity> recentProcessingActivities = new()
    {
        new() { Timestamp = DateTime.Now.AddMinutes(-1), Description = "Processed deadline reminders", Status = "Success" },
        new() { Timestamp = DateTime.Now.AddMinutes(-3), Description = "Checked attendance thresholds", Status = "Success" },
        new() { Timestamp = DateTime.Now.AddMinutes(-8), Description = "Cleaned up expired notifications", Status = "Success" },
        new() { Timestamp = DateTime.Now.AddMinutes(-12), Description = "Processed result notifications", Status = "Success" }
    };

    public class ProcessingActivity
    {
        public DateTime Timestamp { get; set; }
        public string Description { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            StateHasChanged();

            // Load all automation data in parallel
            var metricsTask = AutomationEngine.GetAutomationMetricsAsync();
            var rulesTask = AutomationEngine.GetAutomationRulesAsync();
            var logsTask = AutomationEngine.GetAutomationLogsAsync(20);

            await Task.WhenAll(metricsTask, rulesTask, logsTask);

            metrics = await metricsTask;
            automationRules = await rulesTask;
            automationLogs = await logsTask;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load automation data: {ex.Message}";
            Console.WriteLine($"Error loading automation data: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private async Task ToggleRule(string ruleId)
    {
        try
        {
            await AutomationEngine.ToggleAutomationRuleAsync(ruleId);
            
            // Update local state
            var rule = automationRules?.FirstOrDefault(r => r.Id == ruleId);
            if (rule != null)
            {
                rule.IsActive = !rule.IsActive;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling rule: {ex.Message}");
        }
    }

    private void ShowCreateRuleModal()
    {
        // TODO: Implement create rule modal
        Console.WriteLine("Create rule modal - TODO");
    }

    private void EditRule(string ruleId)
    {
        // TODO: Implement edit rule functionality
        Console.WriteLine($"Edit rule {ruleId} - TODO");
    }

    private void ViewRuleLogs(string ruleId)
    {
        // TODO: Implement rule-specific logs view
        Console.WriteLine($"View logs for rule {ruleId} - TODO");
    }

    private void ViewAllLogs()
    {
        // TODO: Navigate to full logs page
        Console.WriteLine("View all logs - TODO");
    }

    private string GetPriorityBadgeClass(NotificationPriority priority)
    {
        return priority switch
        {
            NotificationPriority.Critical => "bg-danger",
            NotificationPriority.High => "bg-warning",
            NotificationPriority.Normal => "bg-primary",
            NotificationPriority.Low => "bg-secondary",
            _ => "bg-info"
        };
    }

    private string GetTypeProgressBarClass(string type)
    {        return type.ToLower() switch
        {
            "result" => "bg-success",
            "assignment" => "bg-primary",
            "attendance" => "bg-info",
            "warning" => "bg-warning",
            "alert" => "bg-danger",
            "notice" => "bg-secondary",
            _ => "bg-primary"
        };
    }

    private string GetNextCheckCountdown()
    {
        var nextCheck = lastAutomationCheck.AddMinutes(5);
        var remaining = nextCheck - DateTime.Now;
        
        if (remaining.TotalSeconds <= 0)
        {
            return "Due now";
        }
        
        if (remaining.TotalMinutes >= 1)
        {
            return $"{(int)remaining.TotalMinutes}m {remaining.Seconds}s";
        }
        else
        {
            return $"{remaining.Seconds}s";
        }
    }

    private string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "success" => "bg-success",
            "failed" => "bg-danger",
            "warning" => "bg-warning",
            "processing" => "bg-info",
            _ => "bg-secondary"
        };
    }
}
