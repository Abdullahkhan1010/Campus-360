@page "/login"
@inject AuthenticationService AuthService
@inject UserContextService UserContext
@inject NavigationManager Navigation

<PageTitle>Login - Campus360</PageTitle>

<div class="login-container">
    <div class="login-wrapper">
        <!-- Left Side - Branding -->
        <div class="login-brand">
            <div class="brand-content">
                <div class="logo-section">
                    <i class="bi bi-mortarboard-fill logo-icon"></i>
                    <h1 class="brand-title">Campus360</h1>
                </div>
                <p class="brand-subtitle">Your Complete Learning Management System</p>
                <div class="brand-features">
                    <div class="feature-item">
                        <i class="bi bi-check-circle-fill"></i>
                        <span>Secure Role-Based Access</span>
                    </div>
                    <div class="feature-item">
                        <i class="bi bi-check-circle-fill"></i>
                        <span>Real-time Collaboration</span>
                    </div>
                    <div class="feature-item">
                        <i class="bi bi-check-circle-fill"></i>
                        <span>Modern Interface</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Side - Login Form -->
        <div class="login-form-section">
            <div class="login-form-container">
                <div class="login-header">
                    <h2>Welcome Back</h2>
                    <p>Select your role and sign in to continue</p>
                </div>

                <!-- Role Selector -->
                @if (selectedRole == null)
                {
                    <div class="role-selector">
                        <h3>Choose Your Role</h3>
                        <div class="role-buttons">                            <button class="role-button student-role" @onclick="@(() => SelectRole("student"))">
                                <div class="role-icon">
                                    <i class="bi bi-person-graduation"></i>
                                </div>
                                <div class="role-info">
                                    <h4>Student</h4>
                                    <p>Access courses, assignments, and materials</p>
                                </div>
                                <i class="bi bi-arrow-right role-arrow"></i>
                            </button>

                            <button class="role-button teacher-role" @onclick="@(() => SelectRole("teacher"))">
                                <div class="role-icon">
                                    <i class="bi bi-person-workspace"></i>
                                </div>
                                <div class="role-info">
                                    <h4>Teacher</h4>
                                    <p>Manage courses, grade assignments, track attendance</p>
                                </div>
                                <i class="bi bi-arrow-right role-arrow"></i>
                            </button>

                            <button class="role-button admin-role" @onclick="@(() => SelectRole("admin"))">
                                <div class="role-icon">
                                    <i class="bi bi-shield-check"></i>
                                </div>
                                <div class="role-info">
                                    <h4>Admin</h4>
                                    <p>Full system access and user management</p>
                                </div>
                                <i class="bi bi-arrow-right role-arrow"></i>
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <!-- Login Form -->
                    <div class="login-form-content">
                        <div class="selected-role-header">
                            <button class="back-button" @onclick="() => selectedRole = null">
                                <i class="bi bi-arrow-left"></i>
                            </button>
                            <div class="selected-role-info">
                                <div class="selected-role-icon @GetRoleClass(selectedRole)">
                                    <i class="@GetRoleIcon(selectedRole)"></i>
                                </div>
                                <div>
                                    <h4>@selectedRole.ToUpperInvariant() LOGIN</h4>
                                    <p>Enter your credentials</p>
                                </div>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">
                                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                @errorMessage
                            </div>
                        }

                        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                            <DataAnnotationsValidator />
                            
                            <div class="form-group">
                                <label for="email" class="form-label">Email Address</label>
                                <div class="input-wrapper">
                                    <i class="bi bi-envelope input-icon"></i>
                                    <InputText @bind-Value="loginModel.Email" 
                                              class="form-control" 
                                              id="email" 
                                              placeholder="Enter your email"
                                              disabled="@isLoading" />
                                </div>
                                <ValidationMessage For="@(() => loginModel.Email)" />
                            </div>

                            <div class="form-group">
                                <label for="password" class="form-label">Password</label>
                                <div class="input-wrapper">
                                    <i class="bi bi-lock input-icon"></i>
                                    <InputText @bind-Value="loginModel.Password" 
                                              type="password" 
                                              class="form-control" 
                                              id="password" 
                                              placeholder="Enter your password"
                                              disabled="@isLoading" />
                                </div>
                                <ValidationMessage For="@(() => loginModel.Password)" />
                            </div>

                            <button type="submit" 
                                    class="btn btn-primary btn-login @GetRoleClass(selectedRole)" 
                                    disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Signing In...</span>
                                }
                                else
                                {
                                    <span>Sign In as @selectedRole.ToUpperInvariant()</span>
                                    <i class="bi bi-arrow-right ms-2"></i>
                                }
                            </button>
                        </EditForm>                        <!-- Demo Credentials -->
                        <div class="demo-credentials">
                            <h6>Demo Credentials:</h6>
                            <small>
                                @if (selectedRole == "admin")
                                {
                                    <text><strong>Email:</strong> admin@campus360.com<br />
                                    <strong>Password:</strong> admin123</text>
                                }
                                else if (selectedRole == "teacher")
                                {
                                    <text><strong>Email:</strong> teacher@campus360.com<br />
                                    <strong>Password:</strong> teacher123</text>
                                }
                                else if (selectedRole == "student")
                                {
                                    <text><strong>Email:</strong> student@campus360.com<br />
                                    <strong>Password:</strong> student123</text>
                                }
                            </small>
                        </div>
                    </div>
                }

                <div class="login-footer">
                    <small class="text-muted">
                        Don't have an account? Contact your administrator.
                    </small>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    private string? selectedRole = null;    protected override async Task OnInitializedAsync()
    {
        // Check if user is already logged in
        await UserContext.RestoreUserSessionAsync();
        if (UserContext.IsLoggedIn)
        {
            RedirectBasedOnRole();
        }
        else
        {
            // Ensure session is completely clean
            await UserContext.LogoutAsync();
        }
    }

    private void SelectRole(string role)
    {
        selectedRole = role;
        errorMessage = string.Empty;
        loginModel = new LoginModel(); // Reset form
    }

    private async Task HandleLogin()
    {
        if (selectedRole == null)
        {
            errorMessage = "Please select a role first.";
            return;
        }

        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var result = await AuthService.LoginAsync(loginModel.Email, loginModel.Password);
            
            if (result.IsSuccess && result.User != null)
            {
                UserContext.SetUser(result.User);
                RedirectBasedOnRole();
            }
            else
            {
                errorMessage = result.ErrorMessage ?? "Login failed. Please check your credentials.";
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred during login. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }    private void RedirectBasedOnRole()
    {
        var user = UserContext.CurrentUser;
        if (user != null)
        {
            string targetUrl = user.Role.ToLower() switch
            {
                "admin" => "/admin/dashboard",
                "teacher" => "/teacher/dashboard",
                "student" => "/student/dashboard",
                _ => "/unauthorized"
            };
            Navigation.NavigateTo(targetUrl, forceLoad: true);
        }
    }

    private string GetRoleClass(string role)
    {
        return role?.ToLower() switch
        {
            "student" => "role-student",
            "teacher" => "role-teacher", 
            "admin" => "role-admin",
            _ => ""
        };
    }

    private string GetRoleIcon(string role)
    {
        return role?.ToLower() switch
        {
            "student" => "bi bi-person-graduation",
            "teacher" => "bi bi-person-workspace",
            "admin" => "bi bi-shield-check",
            _ => "bi bi-person"
        };
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = string.Empty;
    }
}