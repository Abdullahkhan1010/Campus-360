@page "/teacher/attendance"
@layout TeacherLayout
@using Microsoft.AspNetCore.Components.Web
@inject TeacherService TeacherService
@inject UserContextService UserContext
@inject IJSRuntime JSRuntime

<PageTitle>Mark Attendance - Campus360</PageTitle>

<div class="container-fluid px-4 py-3">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold mb-0">Mark Attendance</h2>
        <button class="btn btn-success" @onclick="SaveAttendance" disabled="@(!hasUnsavedChanges)">
            <i class="bi bi-check-circle me-2"></i>Save Attendance
        </button>
    </div>
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h6 class="card-title">Select Course & Session</h6>
                    <div class="mb-3">
                        <label class="form-label">Course</label>
                        <select class="form-select" @bind="selectedCourseId" @bind:after="OnCourseChanged">
                            <option value="">Select a course...</option>
                            @if (teacherCourses != null)
                            {
                                @foreach (var course in teacherCourses)
                                {
                                    <option value="@course.CourseId">@course.CourseCode - @course.CourseName</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Session Date</label>
                        <input type="date" class="form-control" @bind="sessionDate" @bind:after="OnSessionDateChanged" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Session Type</label>
                        <select class="form-select" @bind="sessionType">
                            <option value="Lecture">Lecture</option>
                            <option value="Lab">Lab</option>
                            <option value="Tutorial">Tutorial</option>
                            <option value="Seminar">Seminar</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h6 class="card-title">Attendance Summary</h6>
                    @if (courseStudents != null && courseStudents.Any())
                    {
                        <div class="row text-center">
                            <div class="col-4">
                                <div class="text-success fs-4 fw-bold">@presentCount</div>
                                <small class="text-muted">Present</small>
                            </div>
                            <div class="col-4">
                                <div class="text-danger fs-4 fw-bold">@absentCount</div>
                                <small class="text-muted">Absent</small>
                            </div>
                            <div class="col-4">
                                <div class="text-info fs-4 fw-bold">@(presentCount + absentCount)</div>
                                <small class="text-muted">Total</small>
                            </div>
                        </div>
                        <div class="mt-3">
                            <div class="progress">
                                <div class="progress-bar bg-success" style="width: @attendancePercentage%">
                                    @attendancePercentage.ToString("F1")%
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">No students found for this course.</div>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(selectedCourseId) && courseStudents != null)
    {
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Student List</h5>
                <div class="btn-group">
                    <button class="btn btn-sm btn-outline-success" @onclick="MarkAllPresent">
                        <i class="bi bi-check-all me-1"></i>Mark All Present
                    </button>
                    <button class="btn btn-sm btn-outline-danger" @onclick="MarkAllAbsent">
                        <i class="bi bi-x-lg me-1"></i>Mark All Absent
                    </button>
                </div>
            </div>
            <div class="card-body">
                @if (courseStudents.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th style="width: 60px;">Status</th>
                                    <th>Roll Number</th>
                                    <th>Student Name</th>
                                    <th>Email</th>
                                    <th style="width: 100px;">Overall %</th>
                                    <th style="width: 120px;">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var student in courseStudents)
                                {
                                    <tr class="@(attendanceData.ContainsKey(student.StudentId) && attendanceData[student.StudentId] ? "table-success" : "table-light")">
                                        <td class="text-center">
                                            @if (attendanceData.ContainsKey(student.StudentId) && attendanceData[student.StudentId])
                                            {
                                                <i class="bi bi-check-circle-fill text-success fs-5"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-x-circle-fill text-danger fs-5"></i>
                                            }
                                        </td>
                                        <td class="fw-bold">@student.RollNumber</td>
                                        <td>@student.FullName</td>
                                        <td class="text-muted">@student.Email</td>
                                        <td>
                                            <span class="badge bg-@(student.AttendancePercentage >= 75 ? "success" : student.AttendancePercentage >= 50 ? "warning" : "danger")">
                                                @student.AttendancePercentage.ToString("F1")%
                                            </span>
                                        </td>
                                        <td>
                                            <div class="btn-group btn-group-sm">
                                                <button class="btn btn-outline-success @(attendanceData.ContainsKey(student.StudentId) && attendanceData[student.StudentId] ? "active" : "")"
                                                        @onclick="() => MarkPresent(student.StudentId)">
                                                    <i class="bi bi-check"></i>
                                                </button>
                                                <button class="btn btn-outline-danger @(attendanceData.ContainsKey(student.StudentId) && !attendanceData[student.StudentId] ? "active" : "")"
                                                        @onclick="() => MarkAbsent(student.StudentId)">
                                                    <i class="bi bi-x"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>No students enrolled in this course.
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle me-2"></i>Please select a course to mark attendance.
        </div>
    }

    <!-- Success Modal -->
    <div class="modal fade" id="successModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-check-circle me-2"></i>Attendance Saved
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p>Attendance has been successfully saved for the selected session.</p>
                    @if (automationTriggered)
                    {
                        <div class="alert alert-info">
                            <i class="bi bi-robot me-2"></i>
                            <strong>Automation Triggered:</strong> Notifications will be sent to students with low attendance.
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" data-bs-dismiss="modal">OK</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<TeacherCourse>? teacherCourses;
    private List<CourseStudent>? courseStudents;
    private Dictionary<string, bool> attendanceData = new();
    private string selectedCourseId = "";
    private DateTime sessionDate = DateTime.Today;
    private string sessionType = "Lecture";
    private bool hasUnsavedChanges = false;
    private bool automationTriggered = false;

    private int presentCount => attendanceData.Values.Count(x => x);
    private int absentCount => attendanceData.Values.Count(x => !x);
    private double attendancePercentage => attendanceData.Any() ? (presentCount * 100.0 / attendanceData.Count) : 0;

    protected override async Task OnInitializedAsync()
    {
        if (UserContext.CurrentUser != null)
        {
            teacherCourses = await TeacherService.GetTeacherCoursesAsync(UserContext.CurrentUser.Id);
        }
    }    private async Task OnCourseChanged()
    {
        if (!string.IsNullOrEmpty(selectedCourseId))
        {
            await LoadCourseStudents();
        }
        else
        {
            courseStudents = null;
            attendanceData.Clear();
        }
        hasUnsavedChanges = false;
    }

    private async Task OnSessionDateChanged()
    {
        hasUnsavedChanges = false;
        if (!string.IsNullOrEmpty(selectedCourseId))
        {
            // Check if attendance already exists for this date
            var existingSession = await TeacherService.GetAttendanceSessionAsync(selectedCourseId, sessionDate);
            if (existingSession != null)
            {
                // Load existing attendance data
                foreach (var record in existingSession.AttendanceRecords)
                {
                    attendanceData[record.StudentId] = record.IsPresent;
                }
            }
        }
    }

    private async Task LoadCourseStudents()
    {
        courseStudents = await TeacherService.GetCourseStudentsAsync(selectedCourseId);
        attendanceData.Clear();
        
        // Initialize attendance data - default to absent
        if (courseStudents != null)
        {
            foreach (var student in courseStudents)
            {
                attendanceData[student.StudentId] = false;
            }
        }
    }

    private void MarkPresent(string studentId)
    {
        attendanceData[studentId] = true;
        hasUnsavedChanges = true;
    }

    private void MarkAbsent(string studentId)
    {
        attendanceData[studentId] = false;
        hasUnsavedChanges = true;
    }

    private void MarkAllPresent()
    {
        if (courseStudents != null)
        {
            foreach (var student in courseStudents)
            {
                attendanceData[student.StudentId] = true;
            }
            hasUnsavedChanges = true;
        }
    }

    private void MarkAllAbsent()
    {
        if (courseStudents != null)
        {
            foreach (var student in courseStudents)
            {
                attendanceData[student.StudentId] = false;
            }
            hasUnsavedChanges = true;
        }
    }

    private async Task SaveAttendance()
    {
        if (string.IsNullOrEmpty(selectedCourseId) || !attendanceData.Any())
            return;

        var attendanceSession = new AttendanceSession
        {
            SessionId = Guid.NewGuid().ToString(),
            CourseId = selectedCourseId,
            SessionDate = sessionDate,
            SessionType = sessionType,
            AttendanceRecords = attendanceData.Select(kvp => new AttendanceRecord
            {
                StudentId = kvp.Key,
                IsPresent = kvp.Value,
                MarkedAt = DateTime.Now
            }).ToList()
        };

        var result = await TeacherService.SaveAttendanceAsync(attendanceSession);
        if (result.Success)
        {
            automationTriggered = result.AutomationTriggered;
            hasUnsavedChanges = false;
            await InvokeAsync(() => JSRuntime.InvokeVoidAsync("showModal", "successModal"));
        }
    }
}
