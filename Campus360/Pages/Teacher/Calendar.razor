@page "/teacher/calendar"
@layout TeacherLayout
@using Campus360.Models
@using Campus360.Services
@using Campus360.Components.Calendar
@using Campus360.Components.Teacher
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@inject CalendarService CalendarService
@inject UserContextService UserContext
@inject IJSRuntime JSRuntime

<PageTitle>Academic Calendar - Campus360</PageTitle>

<div class="container-fluid px-4 py-3">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="fw-bold mb-0 text-primary">
                <i class="fas fa-calendar-alt me-2"></i>Academic Calendar Management
            </h2>
            <p class="text-muted mb-0">Manage your courses, assignments, and schedule academic events</p>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-success btn-sm" @onclick="ShowCreateEventModal">
                <i class="fas fa-plus me-1"></i>Create Event
            </button>
            <button class="btn btn-outline-primary btn-sm" @onclick="RefreshCalendar">
                <i class="fas fa-sync-alt me-1"></i>Refresh
            </button>
            <button class="btn btn-primary btn-sm" @onclick="() => SwitchView(CalendarViewType.Timeline)">
                <i class="fas fa-list me-1"></i>Timeline View
            </button>
        </div>
    </div>

    <!-- Calendar Statistics Cards -->
    <div class="row mb-4">
        <div class="col-lg-2 col-md-4 col-sm-6">
            <div class="card border-0 shadow-sm bg-primary text-white">
                <div class="card-body text-center">
                    <div class="mb-2">
                        <i class="fas fa-calendar-day fa-2x"></i>
                    </div>
                    <h5 class="mb-1">@CalendarStats?.TodayEvents ?? 0</h5>
                    <small>Today's Events</small>
                </div>
            </div>
        </div>
        <div class="col-lg-2 col-md-4 col-sm-6">
            <div class="card border-0 shadow-sm bg-warning text-white">
                <div class="card-body text-center">
                    <div class="mb-2">
                        <i class="fas fa-tasks fa-2x"></i>
                    </div>
                    <h5 class="mb-1">@CalendarStats?.UpcomingAssignments ?? 0</h5>
                    <small>Assignments Due</small>
                </div>
            </div>
        </div>
        <div class="col-lg-2 col-md-4 col-sm-6">
            <div class="card border-0 shadow-sm bg-danger text-white">
                <div class="card-body text-center">
                    <div class="mb-2">
                        <i class="fas fa-graduation-cap fa-2x"></i>
                    </div>
                    <h5 class="mb-1">@CalendarStats?.UpcomingExams ?? 0</h5>
                    <small>Upcoming Exams</small>
                </div>
            </div>
        </div>
        <div class="col-lg-2 col-md-4 col-sm-6">
            <div class="card border-0 shadow-sm bg-info text-white">
                <div class="card-body text-center">
                    <div class="mb-2">
                        <i class="fas fa-chalkboard-teacher fa-2x"></i>
                    </div>
                    <h5 class="mb-1">@GetClassesThisWeek()</h5>
                    <small>Classes This Week</small>
                </div>
            </div>
        </div>
        <div class="col-lg-2 col-md-4 col-sm-6">
            <div class="card border-0 shadow-sm bg-success text-white">
                <div class="card-body text-center">
                    <div class="mb-2">
                        <i class="fas fa-bullhorn fa-2x"></i>
                    </div>
                    <h5 class="mb-1">@GetNoticesPublished()</h5>
                    <small>Notices Published</small>
                </div>
            </div>
        </div>
        <div class="col-lg-2 col-md-4 col-sm-6">
            <div class="card border-0 shadow-sm bg-secondary text-white">
                <div class="card-body text-center">
                    <div class="mb-2">
                        <i class="fas fa-calendar-week fa-2x"></i>
                    </div>
                    <h5 class="mb-1">@CalendarStats?.ThisWeekEvents ?? 0</h5>
                    <small>This Week Total</small>
                </div>
            </div>
        </div>
    </div>

    @if (CurrentViewType == CalendarViewType.Timeline)
    {
        <!-- Timeline View -->
        <div class="card border-0 shadow">
            <div class="card-header bg-light">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-history me-2"></i>Teaching Activity Timeline
                    </h5>
                    <div class="d-flex gap-2">
                        <button class="btn btn-outline-primary btn-sm" @onclick="() => SwitchView(CalendarViewType.Month)">
                            <i class="fas fa-calendar me-1"></i>Calendar View
                        </button>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-secondary @(TimelineFilter == "all" ? "active" : "")" 
                                    @onclick='() => FilterTimeline("all")'>All</button>
                            <button class="btn btn-outline-secondary @(TimelineFilter == "assignments" ? "active" : "")" 
                                    @onclick='() => FilterTimeline("assignments")'>Assignments</button>
                            <button class="btn btn-outline-secondary @(TimelineFilter == "exams" ? "active" : "")" 
                                    @onclick='() => FilterTimeline("exams")'>Exams</button>
                            <button class="btn btn-outline-secondary @(TimelineFilter == "classes" ? "active" : "")" 
                                    @onclick='() => FilterTimeline("classes")'>Classes</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-body">
                @if (FilteredTimelineGroups?.Any() == true)
                {
                    @foreach (var group in FilteredTimelineGroups)
                    {
                        <div class="timeline-group mb-4">
                            <div class="timeline-header d-flex align-items-center justify-content-between mb-3">
                                <div class="d-flex align-items-center">
                                    <div class="badge @(group.IsToday ? "bg-primary" : group.IsPast ? "bg-secondary" : "bg-success") me-2">
                                        @group.GroupTitle
                                    </div>
                                    <small class="text-muted">@group.EventCount event(s)</small>
                                </div>
                                @if (group.IsUpcoming)
                                {
                                    <span class="badge bg-info">
                                        <i class="fas fa-clock me-1"></i>Upcoming
                                    </span>
                                }
                            </div>
                            
                            @foreach (var timelineEvent in group.Events)
                            {
                                <div class="timeline-item d-flex mb-3 @(timelineEvent.IsPast ? "opacity-75" : "")">
                                    <div class="timeline-marker me-3">
                                        <div class="rounded-circle d-flex align-items-center justify-content-center position-relative" 
                                             style="width: 45px; height: 45px; background-color: @timelineEvent.Color">
                                            <i class="@timelineEvent.IconClass text-white"></i>
                                            @if (timelineEvent.Priority == EventPriority.Critical || timelineEvent.Priority == EventPriority.High)
                                            {
                                                <span class="position-absolute top-0 start-100 translate-middle p-1 bg-danger border border-light rounded-circle">
                                                    <span class="visually-hidden">Important</span>
                                                </span>
                                            }
                                        </div>
                                    </div>
                                    <div class="timeline-content flex-grow-1">
                                        <div class="card border-start-0" style="border-left: 3px solid @timelineEvent.Color !important;">
                                            <div class="card-body py-3">
                                                <div class="d-flex justify-content-between align-items-start">
                                                    <div class="flex-grow-1">
                                                        <div class="d-flex align-items-center mb-2">
                                                            <h6 class="mb-0 @(timelineEvent.IsCompleted ? "text-decoration-line-through" : "")">
                                                                @timelineEvent.Title
                                                            </h6>
                                                            @if (CanEditEvent(timelineEvent))
                                                            {
                                                                <div class="dropdown ms-auto">
                                                                    <button class="btn btn-link btn-sm text-muted" data-bs-toggle="dropdown">
                                                                        <i class="fas fa-ellipsis-v"></i>
                                                                    </button>
                                                                    <ul class="dropdown-menu dropdown-menu-end">
                                                                        <li><a class="dropdown-item" href="#" @onclick="() => EditEvent(timelineEvent.Id)">
                                                                            <i class="fas fa-edit me-2"></i>Edit
                                                                        </a></li>
                                                                        <li><a class="dropdown-item text-danger" href="#" @onclick="() => DeleteEvent(timelineEvent.Id)">
                                                                            <i class="fas fa-trash me-2"></i>Delete
                                                                        </a></li>
                                                                    </ul>
                                                                </div>
                                                            }
                                                        </div>
                                                        <p class="text-muted small mb-2">@timelineEvent.Description</p>
                                                        <div class="d-flex flex-wrap gap-1">
                                                            @if (!string.IsNullOrEmpty(timelineEvent.CourseInfo))
                                                            {
                                                                <span class="badge bg-light text-dark">
                                                                    <i class="fas fa-book me-1"></i>@timelineEvent.CourseInfo
                                                                </span>
                                                            }
                                                            @if (!string.IsNullOrEmpty(timelineEvent.Venue))
                                                            {
                                                                <span class="badge bg-light text-dark">
                                                                    <i class="fas fa-map-marker-alt me-1"></i>@timelineEvent.Venue
                                                                </span>
                                                            }
                                                            <span class="badge @GetEventTypeBadgeClass(timelineEvent.EventType)">
                                                                @timelineEvent.EventType.ToString()
                                                            </span>
                                                        </div>
                                                    </div>
                                                    <div class="text-end ms-3">
                                                        <small class="text-muted d-block">@timelineEvent.TimeAgo</small>
                                                        @if (timelineEvent.Priority == EventPriority.High || timelineEvent.Priority == EventPriority.Critical)
                                                        {
                                                            <span class="badge bg-danger mt-1">High Priority</span>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="fas fa-calendar-times fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No events found</h5>
                        <p class="text-muted">Your teaching activities will appear here</p>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <!-- Calendar View -->
        <div class="card border-0 shadow">
            <div class="card-header bg-light">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-calendar me-2"></i>Monthly Calendar View
                    </h5>
                    <div class="d-flex gap-2">
                        <button class="btn btn-outline-success btn-sm" @onclick="ShowCreateEventModal">
                            <i class="fas fa-plus me-1"></i>Add Event
                        </button>
                    </div>
                </div>
            </div>
            <div class="card-body p-0">
                @if (CalendarViewModel != null)
                {                    <CalendarView UserId="@UserContext.CurrentUser?.Id"
                                  UserRole="@UserContext.CurrentUser?.Role"
                                  ShowCreateButton="true" />
                }
                else
                {
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading calendar...</span>
                        </div>
                        <p class="text-muted mt-2">Loading your calendar...</p>
                    </div>
                }
            </div>
        </div>
    }

    <!-- Quick Actions Card -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-light">
                    <h6 class="mb-0">
                        <i class="fas fa-bolt me-2"></i>Quick Actions
                    </h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-lg-2 col-md-4 col-sm-6">
                            <button class="btn btn-outline-primary w-100 mb-2" @onclick="() => CreateQuickEvent(AcademicEventType.Assignment)">
                                <i class="fas fa-tasks me-2"></i>Create Assignment
                            </button>
                        </div>
                        <div class="col-lg-2 col-md-4 col-sm-6">
                            <button class="btn btn-outline-danger w-100 mb-2" @onclick="() => CreateQuickEvent(AcademicEventType.Exam)">
                                <i class="fas fa-graduation-cap me-2"></i>Schedule Exam
                            </button>
                        </div>
                        <div class="col-lg-2 col-md-4 col-sm-6">
                            <button class="btn btn-outline-info w-100 mb-2" @onclick="() => CreateQuickEvent(AcademicEventType.ClassScheduled)">
                                <i class="fas fa-chalkboard-teacher me-2"></i>Schedule Class
                            </button>
                        </div>
                        <div class="col-lg-2 col-md-4 col-sm-6">
                            <button class="btn btn-outline-success w-100 mb-2" @onclick="() => CreateQuickEvent(AcademicEventType.Notice)">
                                <i class="fas fa-bullhorn me-2"></i>Publish Notice
                            </button>
                        </div>
                        <div class="col-lg-2 col-md-4 col-sm-6">
                            <a href="/teacher/mycourses" class="btn btn-outline-warning w-100 mb-2">
                                <i class="fas fa-book me-2"></i>My Courses
                            </a>
                        </div>
                        <div class="col-lg-2 col-md-4 col-sm-6">
                            <a href="/teacher/uploadresults" class="btn btn-outline-secondary w-100 mb-2">
                                <i class="fas fa-chart-line me-2"></i>Upload Results
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Event Modal -->
@if (ShowCreateModal)
{
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-plus me-2"></i>Create New Academic Event
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideCreateEventModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="NewEvent" OnValidSubmit="CreateEvent">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Event Title*</label>
                                    <InputText @bind-Value="NewEvent.Title" class="form-control" placeholder="Enter event title" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Event Type*</label>
                                    <InputSelect @bind-Value="NewEvent.EventType" class="form-select">
                                        <option value="">Select Event Type</option>
                                        <option value="@AcademicEventType.Assignment">Assignment</option>
                                        <option value="@AcademicEventType.Exam">Exam</option>
                                        <option value="@AcademicEventType.Quiz">Quiz</option>
                                        <option value="@AcademicEventType.ClassScheduled">Class</option>
                                        <option value="@AcademicEventType.Notice">Notice</option>
                                        <option value="@AcademicEventType.Meeting">Meeting</option>
                                    </InputSelect>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Description*</label>
                            <InputTextArea @bind-Value="NewEvent.Description" class="form-control" rows="3" placeholder="Enter event description" />
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Start Date*</label>
                                    <InputDate @bind-Value="NewEvent.StartDate" class="form-control" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Priority</label>
                                    <InputSelect @bind-Value="NewEvent.Priority" class="form-select">
                                        <option value="@EventPriority.Low">Low</option>
                                        <option value="@EventPriority.Normal">Normal</option>
                                        <option value="@EventPriority.High">High</option>
                                        <option value="@EventPriority.Critical">Critical</option>
                                    </InputSelect>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Venue/Location</label>
                                    <InputText @bind-Value="NewEvent.Venue" class="form-control" placeholder="Enter venue or online link" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Course (Optional)</label>
                                    <InputText @bind-Value="NewEvent.CourseId" class="form-control" placeholder="Course ID" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-check mb-3">
                                    <InputCheckbox @bind-Value="NewEvent.IsAllDay" class="form-check-input" id="allDayCheck" />
                                    <label class="form-check-label" for="allDayCheck">
                                        All Day Event
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check mb-3">
                                    <InputCheckbox @bind-Value="NewEvent.HasReminder" class="form-check-input" id="reminderCheck" />
                                    <label class="form-check-label" for="reminderCheck">
                                        Set Reminder
                                    </label>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-end gap-2">
                            <button type="button" class="btn btn-secondary" @onclick="HideCreateEventModal">Cancel</button>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save me-1"></i>Create Event
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private CalendarViewModel? CalendarViewModel;
    private List<TimelineGroup>? TimelineGroups;
    private List<TimelineGroup>? FilteredTimelineGroups;
    private CalendarStats? CalendarStats;
    private CalendarViewType CurrentViewType = CalendarViewType.Month;
    private bool IsLoading = true;
    private bool ShowCreateModal = false;
    private string TimelineFilter = "all";
    private CreateEventModel NewEvent = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCalendarData();
    }

    private async Task LoadCalendarData()
    {
        IsLoading = true;
        StateHasChanged();

        try
        {            var userId = UserContext.CurrentUser?.Id ?? "t1";
            var userRole = UserContext.CurrentUser?.Role ?? "Teacher";

            // Load calendar view and timeline
            var calendarTask = CalendarService.GetCalendarViewAsync(userId, userRole, CurrentViewType);
            var timelineTask = CalendarService.GetTimelineAsync(userId, userRole);
            var statsTask = CalendarService.GetCalendarStatsAsync(userId, userRole);

            await Task.WhenAll(calendarTask, timelineTask, statsTask);

            CalendarViewModel = await calendarTask;
            TimelineGroups = await timelineTask;
            CalendarStats = await statsTask;
            
            FilterTimeline(TimelineFilter); // Apply current filter
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading calendar data: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task SwitchView(CalendarViewType viewType)
    {
        CurrentViewType = viewType;
        await LoadCalendarData();
    }

    private async Task RefreshCalendar()
    {
        await LoadCalendarData();
        await JSRuntime.InvokeVoidAsync("showToast", "success", "Calendar refreshed successfully!");
    }

    private void FilterTimeline(string filter)
    {
        TimelineFilter = filter;
        
        if (TimelineGroups != null)
        {
            FilteredTimelineGroups = TimelineGroups.Select(group => new TimelineGroup
            {
                GroupTitle = group.GroupTitle,
                GroupDate = group.GroupDate,
                IsToday = group.IsToday,
                IsPast = group.IsPast,
                IsUpcoming = group.IsUpcoming,
                Events = filter switch
                {
                    "assignments" => group.Events.Where(e => e.EventType == AcademicEventType.Assignment).ToList(),
                    "exams" => group.Events.Where(e => e.EventType == AcademicEventType.Exam || e.EventType == AcademicEventType.Quiz).ToList(),
                    "classes" => group.Events.Where(e => e.EventType == AcademicEventType.ClassScheduled || e.EventType == AcademicEventType.ClassCancelled).ToList(),
                    _ => group.Events
                },
                EventCount = 0 // Will be set below
            }).Where(group => group.Events.Any()).ToList();

            // Update event counts
            foreach (var group in FilteredTimelineGroups)
            {
                group.EventCount = group.Events.Count;
            }
        }
        
        StateHasChanged();
    }

    private void ShowCreateEventModal()
    {
        NewEvent = new CreateEventModel
        {
            StartDate = DateTime.Now.AddDays(1),
            Priority = EventPriority.Normal,
            EventType = AcademicEventType.Assignment
        };
        ShowCreateModal = true;
    }

    private void HideCreateEventModal()
    {
        ShowCreateModal = false;
        NewEvent = new();
    }

    private async Task CreateEvent()
    {
        try
        {
            var userId = UserContext.CurrentUser?.Id ?? "t1";
            var result = await CalendarService.CreateEventAsync(NewEvent, userId, "Teacher");
            
            if (result.Success)
            {
                await JSRuntime.InvokeVoidAsync("showToast", "success", "Event created successfully!");
                HideCreateEventModal();
                await LoadCalendarData();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("showToast", "error", result.Message);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", "error", $"Error creating event: {ex.Message}");
        }
    }

    private async Task CreateQuickEvent(AcademicEventType eventType)
    {
        NewEvent = new CreateEventModel
        {
            EventType = eventType,
            StartDate = DateTime.Now.AddDays(1),
            Priority = eventType == AcademicEventType.Exam ? EventPriority.High : EventPriority.Normal,
            Title = $"New {eventType}",
            Description = $"Quick {eventType} created from calendar"
        };
        ShowCreateModal = true;
    }

    private bool CanEditEvent(TimelineEvent timelineEvent)
    {
        // Teachers can edit their own events or system-generated events for their courses
        return !timelineEvent.IsPast || timelineEvent.EventType == AcademicEventType.Assignment;
    }

    private async Task EditEvent(string eventId)
    {
        // TODO: Implement edit event functionality
        await JSRuntime.InvokeVoidAsync("showToast", "info", "Edit functionality coming soon!");
    }

    private async Task DeleteEvent(string eventId)
    {
        // TODO: Implement delete event functionality
        await JSRuntime.InvokeVoidAsync("showToast", "info", "Delete functionality coming soon!");
    }

    private string GetEventTypeBadgeClass(AcademicEventType eventType)
    {
        return eventType switch
        {
            AcademicEventType.Assignment => "bg-primary",
            AcademicEventType.Exam => "bg-danger",
            AcademicEventType.Quiz => "bg-warning",
            AcademicEventType.ClassScheduled => "bg-info",
            AcademicEventType.Notice => "bg-success",
            AcademicEventType.Result => "bg-success",
            _ => "bg-secondary"
        };
    }

    private int GetClassesThisWeek()
    {
        return CalendarStats?.EventsByType?.GetValueOrDefault(AcademicEventType.ClassScheduled, 0) ?? 0;
    }

    private int GetNoticesPublished()
    {
        return CalendarStats?.EventsByType?.GetValueOrDefault(AcademicEventType.Notice, 0) ?? 0;
    }
}

<style>
    .timeline-marker {
        flex-shrink: 0;
    }
    
    .timeline-item:not(:last-child)::before {
        content: '';
        position: absolute;
        left: 22px;
        top: 45px;
        bottom: -20px;
        width: 2px;
        background: #e9ecef;
        z-index: 1;
    }
    
    .timeline-group {
        position: relative;
    }

    .card {
        transition: all 0.3s ease;
    }
    
    .card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(0,0,0,0.1) !important;
    }

    .modal.show {
        background-color: rgba(0,0,0,0.5);
    }
</style>
