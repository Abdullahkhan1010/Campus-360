@page "/teacher/notices"
@layout TeacherLayout
@inject TeacherService TeacherService
@inject UserContextService UserContext
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Send Notices - Campus360</PageTitle>

<div class="container-fluid px-4 py-3">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold mb-0">Send Notices</h2>
        <button class="btn btn-primary" @onclick="ShowCreateNoticeModal">
            <i class="bi bi-plus-circle me-2"></i>Create Notice
        </button>
    </div>
    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h6>Filter Notices</h6>
                    <select class="form-select mb-2" @bind="filterCourse" @bind:after="FilterNotices">
                        <option value="">All Courses</option>
                        @if (teacherCourses != null)
                        {
                            @foreach (var course in teacherCourses)
                            {
                                <option value="@course.CourseId">@course.CourseCode - @course.CourseName</option>
                            }
                        }
                    </select>
                    <select class="form-select mb-2" @bind="filterType" @bind:after="FilterNotices">
                        <option value="">All Types</option>
                        <option value="Academic">Academic</option>
                        <option value="Assignment">Assignment</option>
                        <option value="Exam">Exam</option>
                        <option value="Event">Event</option>
                        <option value="General">General</option>
                    </select>
                    <select class="form-select" @bind="filterStatus" @bind:after="FilterNotices">
                        <option value="">All Status</option>
                        <option value="Draft">Draft</option>
                        <option value="Published">Published</option>
                        <option value="Scheduled">Scheduled</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h6>Quick Stats</h6>
                    <div class="row text-center">
                        <div class="col-4">
                            <div class="text-primary fs-5 fw-bold">@(allNotices?.Count(n => n.Status == "Published") ?? 0)</div>
                            <small class="text-muted">Published</small>
                        </div>
                        <div class="col-4">
                            <div class="text-warning fs-5 fw-bold">@(allNotices?.Count(n => n.Status == "Draft") ?? 0)</div>
                            <small class="text-muted">Draft</small>
                        </div>
                        <div class="col-4">
                            <div class="text-success fs-5 fw-bold">@(allNotices?.Count(n => n.Status == "Scheduled") ?? 0)</div>
                            <small class="text-muted">Scheduled</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <h6>Filter Notices</h6>
                            <select class="form-select mb-2" @bind="filterCourse" @bind:after="FilterNotices">
                                <option value="">All Courses</option>
                                @if (teacherCourses != null)
                                {
                                    @foreach (var course in teacherCourses)
                                    {
                                        <option value="@course.CourseId">@course.CourseCode - @course.CourseName</option>
                                    }
                                }
                            </select>
                            <select class="form-select mb-2" @bind="filterType" @bind:after="FilterNotices">
                                <option value="">All Types</option>
                                <option value="Academic">Academic</option>
                                <option value="Assignment">Assignment</option>
                                <option value="Exam">Exam</option>
                                <option value="Event">Event</option>
                                <option value="General">General</option>
                            </select>
                            <select class="form-select" @bind="filterStatus" @bind:after="FilterNotices">
                                <option value="">All Status</option>
                                <option value="Draft">Draft</option>
                                <option value="Published">Published</option>
                                <option value="Scheduled">Scheduled</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <h6>Quick Stats</h6>
                            <div class="row text-center">
                                <div class="col-4">
                                    <div class="text-primary fs-5 fw-bold">@(allNotices?.Count(n => n.Status == "Published") ?? 0)</div>
                                    <small class="text-muted">Published</small>
                                </div>
                                <div class="col-4">
                                    <div class="text-warning fs-5 fw-bold">@(allNotices?.Count(n => n.Status == "Draft") ?? 0)</div>
                                    <small class="text-muted">Drafts</small>
                                </div>
                                <div class="col-4">
                                    <div class="text-info fs-5 fw-bold">@(allNotices?.Count(n => n.Status == "Scheduled") ?? 0)</div>
                                    <small class="text-muted">Scheduled</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <h6>Search</h6>
                            <input @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterNotices" 
                                   class="form-control" placeholder="Search notices..." />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (filteredNotices != null && filteredNotices.Any())
    {
        <div class="row">
            @foreach (var notice in filteredNotices)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card h-100">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <span class="badge bg-@GetTypeBadgeColor(notice.Type)">@notice.Type</span>
                            <span class="badge bg-@GetStatusBadgeColor(notice.Status)">@notice.Status</span>
                        </div>
                        <div class="card-body">
                            <h6 class="card-title">@notice.Title</h6>
                            <p class="card-text text-muted">
                                @(notice.Content.Length > 100 ? notice.Content.Substring(0, 100) + "..." : notice.Content)
                            </p>
                            <div class="row text-center mb-3">
                                <div class="col-6">
                                    <small class="text-muted">Recipients</small>
                                    <div class="fw-bold">@notice.RecipientCount</div>
                                </div>
                                <div class="col-6">                                <small class="text-muted">@(notice.Status == "Scheduled" ? "Scheduled" : "Created")</small>
                                    <div class="fw-bold">@(notice.Status == "Scheduled" ? $"Scheduled: {notice.ScheduledDate:MMM dd} (Created: {notice.CreatedDate:MMM dd})" : $"Created: {notice.CreatedDate:MMM dd}")</div>
                                </div>
                            </div>
                            @if (notice.Priority == "High")
                            {
                                <div class="alert alert-danger py-1 px-2">
                                    <i class="bi bi-exclamation-triangle me-1"></i>High Priority
                                </div>
                            }
                            else if (notice.Priority == "Medium")
                            {
                                <div class="alert alert-warning py-1 px-2">
                                    <i class="bi bi-info-circle me-1"></i>Medium Priority
                                </div>
                            }
                        </div>
                        <div class="card-footer">
                            <div class="btn-group w-100">
                                <button class="btn btn-outline-primary btn-sm" @onclick="() => ViewNotice(notice)">
                                    <i class="bi bi-eye me-1"></i>View
                                </button>
                                @if (notice.Status == "Draft")
                                {
                                    <button class="btn btn-outline-success btn-sm" @onclick="() => EditNotice(notice)">
                                        <i class="bi bi-pencil me-1"></i>Edit
                                    </button>
                                    <button class="btn btn-outline-info btn-sm" @onclick="() => PublishNotice(notice)">
                                        <i class="bi bi-send me-1"></i>Publish
                                    </button>
                                }
                                else if (notice.Status == "Published")
                                {
                                    <button class="btn btn-outline-secondary btn-sm" @onclick="() => ViewReceipts(notice)">
                                        <i class="bi bi-check-circle me-1"></i>Receipts
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle me-2"></i>
            @if (string.IsNullOrEmpty(searchTerm) && string.IsNullOrEmpty(filterCourse) && string.IsNullOrEmpty(filterType))
            {
                <text>No notices created yet. Create your first notice to get started.</text>
            }
            else
            {
                <text>No notices found matching your filters.</text>
            }
        </div>
    }

    <!-- Notice Details Modal -->
    <div class="modal fade" id="noticeDetailsModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Notice Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    @if (selectedNotice != null)
                    {
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <strong>Title:</strong> @selectedNotice.Title
                            </div>
                            <div class="col-md-6">
                                <strong>Type:</strong> 
                                <span class="badge bg-@GetTypeBadgeColor(selectedNotice.Type)">@selectedNotice.Type</span>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <strong>Status:</strong> 
                                <span class="badge bg-@GetStatusBadgeColor(selectedNotice.Status)">@selectedNotice.Status</span>
                            </div>
                            <div class="col-md-6">
                                <strong>Priority:</strong> 
                                <span class="badge bg-@(selectedNotice.Priority == "High" ? "danger" : selectedNotice.Priority == "Medium" ? "warning" : "secondary")">
                                    @selectedNotice.Priority
                                </span>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <strong>Course:</strong> @selectedNotice.CourseName
                            </div>
                            <div class="col-md-6">
                                <strong>Recipients:</strong> @selectedNotice.RecipientCount students
                            </div>
                        </div>
                        <div class="mb-3">
                            <strong>Content:</strong>
                            <div class="border p-3 mt-2">@selectedNotice.Content</div>
                        </div>
                        @if (selectedNotice.Status == "Scheduled")
                        {
                            <div class="alert alert-info">
                                <i class="bi bi-clock me-2"></i>
                                This notice is scheduled to be sent on @selectedNotice.ScheduledDate?.ToString("MMMM dd, yyyy 'at' HH:mm")
                            </div>
                        }
                        @if (selectedNotice.Status == "Published")
                        {
                            <div class="alert alert-success">
                                <i class="bi bi-check-circle me-2"></i>
                                This notice was published on @selectedNotice.PublishedDate?.ToString("MMMM dd, yyyy 'at' HH:mm")
                            </div>
                        }
                    }
                </div>
                <div class="modal-footer">
                    @if (selectedNotice?.Status == "Draft")
                    {
                        <button type="button" class="btn btn-primary" @onclick="() => EditNotice(selectedNotice)">
                            <i class="bi bi-pencil me-2"></i>Edit Notice
                        </button>
                        <button type="button" class="btn btn-success" @onclick="() => PublishNotice(selectedNotice)">
                            <i class="bi bi-send me-2"></i>Publish Now
                        </button>
                    }
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Create/Edit Notice Modal -->
    <SendNoticeModal @ref="sendNoticeModal" OnNoticeCreated="OnNoticeCreated" />

    <!-- Success Modal -->
    <div class="modal fade" id="successModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-check-circle me-2"></i>Notice Published
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p>Notice has been successfully published and sent to all recipients.</p>
                    @if (automationTriggered)
                    {
                        <div class="alert alert-info">
                            <i class="bi bi-robot me-2"></i>
                            <strong>Automation Triggered:</strong> Follow-up reminders have been scheduled based on notice priority.
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" data-bs-dismiss="modal">OK</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<TeacherCourse>? teacherCourses;
    private List<NoticeModel>? allNotices;
    private List<NoticeModel>? filteredNotices;
    private NoticeModel? selectedNotice;
    private string searchTerm = "";
    private string filterCourse = "";
    private string filterType = "";
    private string filterStatus = "";
    private bool isLoading = true;
    private bool automationTriggered = false;
    private SendNoticeModal? sendNoticeModal;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        if (UserContext.CurrentUser != null)
        {
            teacherCourses = await TeacherService.GetTeacherCoursesAsync(UserContext.CurrentUser.Id);
            allNotices = await TeacherService.GetTeacherNoticesAsync(UserContext.CurrentUser.Id);
            filteredNotices = allNotices;
        }
        isLoading = false;
    }

    private void FilterNotices()
    {
        if (allNotices == null) return;

        filteredNotices = allNotices.Where(n =>
            (string.IsNullOrEmpty(searchTerm) || 
             n.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
             n.Content.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(filterCourse) || n.CourseId == filterCourse) &&
            (string.IsNullOrEmpty(filterType) || n.Type == filterType) &&
            (string.IsNullOrEmpty(filterStatus) || n.Status == filterStatus))
            .OrderByDescending(n => n.CreatedDate)
            .ToList();
    }

    private string GetTypeBadgeColor(string type)
    {
        return type switch
        {
            "Academic" => "primary",
            "Assignment" => "warning",
            "Exam" => "danger",
            "Event" => "info",
            "General" => "secondary",
            _ => "light"
        };
    }

    private string GetStatusBadgeColor(string status)
    {
        return status switch
        {
            "Published" => "success",
            "Draft" => "warning",
            "Scheduled" => "info",
            _ => "secondary"
        };
    }

    private async Task ShowCreateNoticeModal()
    {
        if (sendNoticeModal != null)
        {
            await sendNoticeModal.ShowAsync();
        }
    }

    private async Task ViewNotice(NoticeModel notice)
    {
        selectedNotice = notice;
        await InvokeAsync(() => JSRuntime.InvokeVoidAsync("showModal", "noticeDetailsModal"));
    }

    private async Task EditNotice(NoticeModel notice)
    {
        if (sendNoticeModal != null)
        {
            await sendNoticeModal.ShowAsync(notice);
        }
    }    private async Task PublishNotice(NoticeModel notice)
    {
        var result = await TeacherService.PublishNoticeAsync(notice, UserContext.CurrentUser?.Id ?? "");
        if (result.Success)
        {
            automationTriggered = result.AutomationTriggered;
            notice.Status = "Published";
            notice.PublishedDate = DateTime.Now;
            
            await InvokeAsync(() => JSRuntime.InvokeVoidAsync("hideModal", "noticeDetailsModal"));
            await InvokeAsync(() => JSRuntime.InvokeVoidAsync("showModal", "successModal"));
        }
    }

    private void ViewReceipts(NoticeModel notice)
    {
        Navigation.NavigateTo($"/teacher/notices/{notice.NoticeId}/receipts");
    }

    private async Task OnNoticeCreated()
    {
        await LoadData();
    }
}
