@page "/student/notices"
@layout StudentLayout
@using Campus360.Services
@using Campus360.Models
@inject StudentService StudentService
@inject UserContextService UserContext

<div class="container-fluid p-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="mb-0">
                    <i class="fas fa-bell text-primary me-2"></i>
                    Notices & Announcements
                </h2>
                <div class="d-flex gap-2">
                    <div class="input-group" style="width: 300px;">
                        <span class="input-group-text bg-white">
                            <i class="fas fa-search text-muted"></i>
                        </span>
                        <input @bind="searchTerm" @oninput="FilterNotices" type="text" class="form-control" placeholder="Search notices...">
                    </div>
                    <select @bind="selectedCategory" @bind:after="FilterNotices" class="form-select" style="width: auto;">
                        <option value="">All Categories</option>
                        <option value="Academic">Academic</option>
                        <option value="Administrative">Administrative</option>
                        <option value="Event">Event</option>
                        <option value="Examination">Examination</option>
                        <option value="Holiday">Holiday</option>
                        <option value="Important">Important</option>
                    </select>
                    <button class="btn btn-outline-primary" @onclick="RefreshNotices">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </div>
            </div>

            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2 text-muted">Loading notices...</p>
                </div>
            }
            else
            {
                <!-- Notice Summary Cards -->
                <div class="row mb-4">
                    <div class="col-lg-3 col-md-6 mb-3">
                        <div class="card border-0 shadow-sm bg-primary text-white">
                            <div class="card-body text-center">
                                <i class="fas fa-bell fa-2x mb-2"></i>
                                <div class="fs-4 fw-bold">@GetTotalNotices()</div>
                                <div>Total Notices</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6 mb-3">
                        <div class="card border-0 shadow-sm bg-warning text-white">
                            <div class="card-body text-center">
                                <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                                <div class="fs-4 fw-bold">@GetUnreadNotices()</div>
                                <div>Unread</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6 mb-3">
                        <div class="card border-0 shadow-sm bg-info text-white">
                            <div class="card-body text-center">
                                <i class="fas fa-star fa-2x mb-2"></i>
                                <div class="fs-4 fw-bold">@GetImportantNotices()</div>
                                <div>Important</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6 mb-3">
                        <div class="card border-0 shadow-sm bg-success text-white">
                            <div class="card-body text-center">
                                <i class="fas fa-calendar fa-2x mb-2"></i>
                                <div class="fs-4 fw-bold">@GetTodayNotices()</div>
                                <div>Today</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Notices List -->
                @if (filteredNotices?.Any() == true)
                {
                    <div class="row">
                        @foreach (var notice in filteredNotices.OrderByDescending(n => n.PublishedDate))
                        {
                            <div class="col-12 mb-3">
                                <div class="card border-0 shadow-sm @(notice.IsRead ? "" : "border-start border-4 border-warning")">
                                    <div class="card-body">
                                        <div class="row align-items-center">
                                            <div class="col-md-8">
                                                <div class="d-flex align-items-start">
                                                    <div class="me-3">
                                                        <div class="rounded-circle bg-light d-flex align-items-center justify-content-center" 
                                                             style="width: 50px; height: 50px;">
                                                            <i class="fas @GetNoticeIcon(notice.Category) @GetNoticeIconColor(notice.Category)"></i>
                                                        </div>
                                                    </div>
                                                    <div class="flex-grow-1">
                                                        <div class="d-flex align-items-center gap-2 mb-2">
                                                            <h5 class="mb-0 @(notice.IsRead ? "text-muted" : "")">@notice.Title</h5>
                                                            @if (notice.Priority == "High")
                                                            {
                                                                <span class="badge bg-danger rounded-pill">
                                                                    <i class="fas fa-exclamation-circle me-1"></i>High Priority
                                                                </span>
                                                            }
                                                            @if (!notice.IsRead)
                                                            {
                                                                <span class="badge bg-warning rounded-pill">New</span>
                                                            }
                                                        </div>
                                                        <p class="text-muted mb-2 @(notice.IsRead ? "" : "fw-semibold")">
                                                            @GetTruncatedContent(notice.Content)
                                                        </p>
                                                        <div class="d-flex align-items-center gap-3 text-muted small">
                                                            <span>
                                                                <i class="fas fa-user me-1"></i>
                                                                @notice.Publisher
                                                            </span>
                                                            <span>
                                                                <i class="fas fa-calendar me-1"></i>
                                                                @notice.PublishedDate.ToString("MMM dd, yyyy")
                                                            </span>
                                                            <span>
                                                                <i class="fas fa-tag me-1"></i>
                                                                @notice.Category
                                                            </span>
                                                            @if (notice.ExpiryDate.HasValue)
                                                            {
                                                                <span class="@(notice.ExpiryDate < DateTime.Now ? "text-danger" : "")">
                                                                    <i class="fas fa-clock me-1"></i>
                                                                    Expires: @notice.ExpiryDate.Value.ToString("MMM dd, yyyy")
                                                                </span>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-4 text-end">
                                                <div class="d-flex gap-2 justify-content-end">
                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewNotice(notice)">
                                                        <i class="fas fa-eye me-1"></i>
                                                        View
                                                    </button>
                                                    @if (!notice.IsRead)
                                                    {
                                                        <button class="btn btn-sm btn-outline-success" @onclick="() => MarkAsRead(notice)">
                                                            <i class="fas fa-check me-1"></i>
                                                            Mark Read
                                                        </button>
                                                    }
                                                    <div class="dropdown">
                                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                                            <i class="fas fa-ellipsis-h"></i>
                                                        </button>
                                                        <ul class="dropdown-menu">
                                                            <li><a class="dropdown-item" href="#" @onclick="() => BookmarkNotice(notice)">
                                                                <i class="fas fa-bookmark me-2"></i>Bookmark
                                                            </a></li>
                                                            <li><a class="dropdown-item" href="#" @onclick="() => ShareNotice(notice)">
                                                                <i class="fas fa-share me-2"></i>Share
                                                            </a></li>
                                                            @if (notice.HasAttachment)
                                                            {
                                                                <li><a class="dropdown-item" href="#" @onclick="() => DownloadAttachment(notice)">
                                                                    <i class="fas fa-download me-2"></i>Download Attachment
                                                                </a></li>
                                                            }
                                                        </ul>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Pagination -->
                    <div class="d-flex justify-content-center mt-4">
                        <nav>
                            <ul class="pagination">
                                <li class="page-item @(currentPage <= 1 ? "disabled" : "")">
                                    <a class="page-link" href="#" @onclick="() => ChangePage(currentPage - 1)">Previous</a>
                                </li>
                                @for (int i = 1; i <= totalPages; i++)
                                {
                                    <li class="page-item @(i == currentPage ? "active" : "")">
                                        <a class="page-link" href="#" @onclick="() => ChangePage(i)">@i</a>
                                    </li>
                                }
                                <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
                                    <a class="page-link" href="#" @onclick="() => ChangePage(currentPage + 1)">Next</a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="fas fa-bell-slash text-muted" style="font-size: 4rem;"></i>
                        <h4 class="mt-3 text-muted">No Notices Found</h4>
                        <p class="text-muted">
                            @if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(selectedCategory))
                            {
                                <span>No notices match your current filters.</span>
                            }
                            else
                            {
                                <span>No notices are currently available.</span>
                            }
                        </p>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private bool isLoading = true;
    private List<Notice>? allNotices;
    private List<Notice>? filteredNotices;
    private string searchTerm = "";
    private string selectedCategory = "";
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadNotices();
    }

    private async Task LoadNotices()
    {
        isLoading = true;
        try
        {            var currentUser = await UserContext.GetCurrentUserAsync();
            if (currentUser != null)
            {
                var studentNotices = await StudentService.GetNoticesAsync(currentUser.Id);
                  // Convert StudentNotice to local Notice
                allNotices = studentNotices.Select(n => new Notice
                {
                    Id = n.Id,
                    Title = n.Title,
                    Content = n.Content,
                    Priority = n.Priority,
                    Category = n.Type, // Use Type as Category since StudentNotice doesn't have Category
                    PublishedDate = n.PublishedDate,
                    IsRead = n.IsRead,
                    Sender = n.SenderName,
                    DaysAgo = (DateTime.Now - n.PublishedDate).Days,
                    Publisher = n.SenderName,
                    HasAttachment = n.HasAttachment,
                    AttachmentUrl = n.AttachmentUrl,
                    ExpiryDate = n.ExpiryDate
                }).ToList();
                
                FilterNotices();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading notices: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshNotices()
    {
        await LoadNotices();
    }    private void FilterNotices()
    {
        if (allNotices == null) return;

        var tempFiltered = allNotices.AsEnumerable();

        if (!string.IsNullOrEmpty(searchTerm))
        {
            tempFiltered = tempFiltered.Where(n => 
                n.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                n.Content.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrEmpty(selectedCategory))
        {
            tempFiltered = tempFiltered.Where(n => n.Category == selectedCategory);
        }

        filteredNotices = tempFiltered.ToList();
        totalPages = (int)Math.Ceiling(filteredNotices.Count() / (double)pageSize);
        currentPage = 1;
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            StateHasChanged();
        }
    }

    private async Task ViewNotice(Notice notice)
    {
        if (!notice.IsRead)
        {
            await MarkAsRead(notice);
        }
        // Implementation for viewing full notice - could open a modal or navigate to detail page
    }

    private async Task MarkAsRead(Notice notice)
    {
        try
        {
            // Call service to mark notice as read
            // await StudentService.MarkNoticeAsReadAsync(notice.Id);
            notice.IsRead = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error marking notice as read: {ex.Message}");
        }
    }

    private void BookmarkNotice(Notice notice)
    {
        // Implementation for bookmarking notice
    }

    private void ShareNotice(Notice notice)
    {
        // Implementation for sharing notice
    }

    private void DownloadAttachment(Notice notice)
    {
        // Implementation for downloading attachment
    }

    private int GetTotalNotices() => allNotices?.Count ?? 0;
    private int GetUnreadNotices() => allNotices?.Count(n => !n.IsRead) ?? 0;
    private int GetImportantNotices() => allNotices?.Count(n => n.Priority == "High") ?? 0;
    private int GetTodayNotices() => allNotices?.Count(n => n.PublishedDate.Date == DateTime.Today) ?? 0;

    private string GetNoticeIcon(string category) => category?.ToLower() switch
    {
        "academic" => "fa-graduation-cap",
        "administrative" => "fa-building",
        "event" => "fa-calendar-alt",
        "examination" => "fa-clipboard-check",
        "holiday" => "fa-gift",
        "important" => "fa-exclamation-triangle",
        _ => "fa-bell"
    };

    private string GetNoticeIconColor(string category) => category?.ToLower() switch
    {
        "academic" => "text-primary",
        "administrative" => "text-secondary",
        "event" => "text-info",
        "examination" => "text-warning",
        "holiday" => "text-success",
        "important" => "text-danger",
        _ => "text-muted"
    };

    private string GetTruncatedContent(string content)
    {
        if (string.IsNullOrEmpty(content)) return "";
        return content.Length > 150 ? content.Substring(0, 150) + "..." : content;
    }    // Mock Notice class - this should be added to StudentModels.cs
    public class Notice
    {
        public string Id { get; set; } = "";
        public string Title { get; set; } = "";
        public string Content { get; set; } = "";
        public string Category { get; set; } = "";
        public string Publisher { get; set; } = "";
        public string Sender { get; set; } = "";
        public int DaysAgo { get; set; }
        public DateTime PublishedDate { get; set; }
        public DateTime? ExpiryDate { get; set; }
        public string Priority { get; set; } = "Normal";
        public bool IsRead { get; set; }
        public bool HasAttachment { get; set; }
        public string? AttachmentUrl { get; set; }
    }
}
