@page "/student/courses"
@layout StudentLayout
@using Campus360.Services
@using Campus360.Models
@inject StudentService StudentService
@inject UserContextService UserContext

<div class="container-fluid p-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="mb-0">
                    <i class="fas fa-book-open text-primary me-2"></i>
                    My Courses
                </h2>
                <div class="d-flex gap-2">
                    <select @bind="selectedSemester" class="form-select" style="width: auto;">
                        <option value="">All Semesters</option>
                        <option value="Fall 2024">Fall 2024</option>
                        <option value="Spring 2024">Spring 2024</option>
                        <option value="Summer 2024">Summer 2024</option>
                    </select>
                    <button class="btn btn-outline-primary" @onclick="RefreshData">
                        <i class="fas fa-sync-alt"></i> Refresh
                    </button>
                </div>
            </div>

            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2 text-muted">Loading your courses...</p>
                </div>
            }
            else if (courses?.Any() == true)
            {
                <div class="row">
                    @foreach (var course in filteredCourses)
                    {
                        <div class="col-lg-6 col-xl-4 mb-4">
                            <div class="card h-100 border-0 shadow-sm">
                                <div class="card-header bg-white border-bottom py-3">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div>
                                            <h5 class="card-title mb-1 text-primary">@course.CourseName</h5>
                                            <p class="text-muted small mb-0">@course.CourseCode</p>
                                        </div>
                                        <span class="badge @GetStatusBadgeClass(course.Status) rounded-pill">
                                            @course.Status
                                        </span>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div class="row g-3">
                                        <div class="col-6">
                                            <div class="text-center">
                                                <div class="fs-4 fw-bold @GetGradeColorClass(course.CurrentGrade)">
                                                    @(course.CurrentGrade?.ToString("F1") ?? "N/A")
                                                </div>
                                                <small class="text-muted">Current Grade</small>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="text-center">
                                                <div class="fs-4 fw-bold text-info">
                                                    @course.CreditHours
                                                </div>
                                                <small class="text-muted">Credit Hours</small>
                                            </div>
                                        </div>
                                        <div class="col-6">                                            <div class="text-center">
                                                <div class="fs-5 fw-semibold">
                                                    @(course.AttendancePercentage.ToString("F0"))%
                                                </div>
                                                <small class="text-muted">Attendance</small>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="text-center">
                                                <div class="fs-5 fw-semibold text-warning">
                                                    @course.AssignmentCount
                                                </div>
                                                <small class="text-muted">Assignments</small>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    @if (!string.IsNullOrEmpty(course.InstructorName))
                                    {
                                        <div class="mt-3 pt-3 border-top">
                                            <div class="d-flex align-items-center">
                                                <i class="fas fa-user-tie text-muted me-2"></i>
                                                <span class="small">@course.InstructorName</span>
                                            </div>
                                        </div>
                                    }
                                </div>
                                <div class="card-footer bg-white border-top-0">
                                    <div class="d-flex gap-2">
                                        <button class="btn btn-sm btn-outline-primary flex-fill">
                                            <i class="fas fa-chart-line me-1"></i>
                                            View Details
                                        </button>
                                        <button class="btn btn-sm btn-outline-secondary">
                                            <i class="fas fa-calendar-alt"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Course Statistics Summary -->
                <div class="row mt-4">
                    <div class="col-12">
                        <div class="card border-0 shadow-sm">
                            <div class="card-header bg-white">
                                <h5 class="mb-0">Course Statistics</h5>
                            </div>
                            <div class="card-body">
                                <div class="row text-center">
                                    <div class="col-md-3">
                                        <div class="border-end">
                                            <div class="fs-3 fw-bold text-primary">@courses.Count()</div>
                                            <div class="text-muted">Total Courses</div>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="border-end">
                                            <div class="fs-3 fw-bold text-success">@GetActiveCoursesCount()</div>
                                            <div class="text-muted">Active Courses</div>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="border-end">
                                            <div class="fs-3 fw-bold text-info">@GetTotalCreditHours()</div>
                                            <div class="text-muted">Credit Hours</div>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="fs-3 fw-bold @GetOverallGpaColorClass()">@GetOverallGpa()</div>
                                        <div class="text-muted">Overall GPA</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-book-open text-muted" style="font-size: 4rem;"></i>
                    <h4 class="mt-3 text-muted">No Courses Found</h4>
                    <p class="text-muted">You are not currently enrolled in any courses.</p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private bool isLoading = true;
    private List<StudentCourse>? courses;
    private string selectedSemester = "";    private IEnumerable<StudentCourse> filteredCourses => 
        courses?.Where(c => string.IsNullOrEmpty(selectedSemester) || c.Semester.ToString() == selectedSemester) ?? Enumerable.Empty<StudentCourse>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            var currentUser = await UserContext.GetCurrentUserAsync();
            if (currentUser != null)
            {
                courses = await StudentService.GetStudentCoursesAsync(currentUser.Id);
            }
        }
        catch (Exception ex)
        {
            // Handle error - could add error state here
            Console.WriteLine($"Error loading courses: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private string GetStatusBadgeClass(string status) => status?.ToLower() switch
    {
        "active" => "bg-success",
        "completed" => "bg-primary", 
        "in progress" => "bg-warning",
        "dropped" => "bg-danger",
        _ => "bg-secondary"
    };

    private string GetGradeColorClass(double? grade) => grade switch
    {
        >= 90 => "text-success",
        >= 80 => "text-info", 
        >= 70 => "text-warning",
        >= 60 => "text-danger",
        _ => "text-muted"
    };

    private string GetOverallGpaColorClass() => GetOverallGpa() switch
    {
        var gpa when gpa >= 3.5 => "text-success",
        var gpa when gpa >= 3.0 => "text-info",
        var gpa when gpa >= 2.5 => "text-warning", 
        _ => "text-danger"
    };

    private int GetActiveCoursesCount() => courses?.Count(c => c.Status?.ToLower() == "active") ?? 0;

    private int GetTotalCreditHours() => courses?.Sum(c => c.CreditHours) ?? 0;

    private double GetOverallGpa()
    {
        if (courses?.Any() != true) return 0.0;
        var validGrades = courses.Where(c => c.CurrentGrade.HasValue).ToList();
        return validGrades.Any() ? validGrades.Average(c => c.CurrentGrade!.Value) / 25.0 : 0.0; // Convert to 4.0 scale
    }
}
